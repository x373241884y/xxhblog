-- MySQL dump 10.16  Distrib 10.1.26-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	10.1.26-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (1,101,'zhangsan','x373241884y2@gmail.com','http://www.xuxihai.top','localhost','2017-05-28 01:26:19','2017-05-27 17:26:19','怎么说也。。。',0,'0','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36','',0,0),(2,101,'xabc','xvaf@qq.com','http://www.bafda.fcom','localhost','2017-05-28 01:26:54','2017-05-27 17:26:54','如此甚好！！！',0,'0','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36','',0,0),(3,97,'hehehe','hehehe@qq.com','http://hehehe','localhost','2017-05-28 01:50:53','2017-05-27 17:50:53','hehehehehehe',0,'0','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36','',0,0),(4,97,'haohaoxiansheng','haohaoxiansheng@qq.com','http://youke.com','localhost','2017-05-28 02:01:58','2017-05-27 18:01:58','好好先生!好好先生!好好先生!好好先生!',0,'0','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36','',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'site_desc','闭心自慎，终不失过兮。秉德无私，参天地兮。','yes'),(2,'site_name','x373241884y','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=MyISAM AUTO_INCREMENT=103 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (1,2,'_wp_page_template','default'),(2,1,'_edit_lock','1476719385:1'),(71,49,'_menu_item_target',''),(72,49,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(73,49,'_menu_item_xfn',''),(70,49,'_menu_item_object','custom'),(69,49,'_menu_item_object_id','49'),(68,49,'_menu_item_menu_item_parent','0'),(67,49,'_menu_item_type','custom'),(66,48,'_wpcom_is_markdown','1'),(65,39,'_edit_lock','1476760450:1'),(64,1,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}'),(63,1,'_wp_desired_post_slug','hello-world'),(62,1,'_wp_trash_meta_time','1476753024'),(61,1,'_wp_trash_meta_status','publish'),(74,49,'_menu_item_url','http://115.28.81.19/'),(75,49,'_menu_item_orphaned','1476765471'),(76,50,'_menu_item_type','post_type'),(77,50,'_menu_item_menu_item_parent','0'),(78,50,'_menu_item_object_id','2'),(79,50,'_menu_item_object','page'),(80,50,'_menu_item_target',''),(81,50,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(82,50,'_menu_item_xfn',''),(83,50,'_menu_item_url',''),(84,50,'_menu_item_orphaned','1476765471'),(85,51,'_wpcom_is_markdown','1'),(86,52,'_wpcom_is_markdown','1'),(87,17,'_edit_lock','1476854449:1'),(88,2,'_edit_lock','1476769065:1'),(89,53,'_wpcom_is_markdown','1'),(90,19,'_edit_lock','1476769932:1'),(91,39,'_oembed_42ebc440c8913b472c880c401a193474','{{unknown}}'),(92,39,'_oembed_60b347a291b31e754e0672ca258f47c5','{{unknown}}'),(93,21,'_edit_lock','1476770537:1'),(94,60,'_wpcom_is_markdown','1'),(95,61,'_wpcom_is_markdown','1'),(96,62,'_wpcom_is_markdown','1'),(97,63,'_wpcom_is_markdown','1'),(98,80,'_wpcom_is_markdown','1'),(99,81,'_wpcom_is_markdown','1'),(100,82,'_wpcom_is_markdown','1'),(101,83,'_wpcom_is_markdown','1'),(102,84,'_wpcom_is_markdown','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=MyISAM AUTO_INCREMENT=103 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (1,1,'2016-10-15 15:38:49','2016-10-15 15:38:49','Welcome to WordPress. This is your first post. Edit or delete it, then start writing!','Hello world!','','trash','open','open','','hello-world__trashed','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/?p=1',0,'post','',0),(2,1,'2016-10-15 15:38:49','2016-10-15 15:38:49','[TOC]\n#### 个人信息\n - XuXiHai/男/1993\n - 本科/山西大学计算机科学与技术\n - 工作年限：2年\n - 技术博客：http://www.xuxihai.top\n - Github：http://github.com/x373241884y\n#### 教育背景\n - 山西大学 计算机科学与技术  (2011-2015)\n - 青岛软件园 javaEE(SSH框架)  (2014-8-2014-12)\n#### 工作经历\n - 2015-07-07-至今\n#### 其他经验\n - 毕业设计(新闻发布系统)\n - 个人博客(Blog)\n#### 自我评价\n - 二笔码农一只','关于我','','publish','closed','open','','sample-page','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/?page_id=2',0,'page','',0),(87,1,'2016-12-30 12:32:58','2016-12-30 12:32:58','### angular terminal 指令属性小记\n\n terminal\n\n 1. 配合指令优先级使用，可以阻止当前元素下的所有低优先级指令执行\n\n 2. 阻止该指令模板中的指令或指令下的子元素指令的编译，需要手动编译\n\n > 注意：第二条官方文档没有提及!','angular指令属性terminal作用','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(90,1,'2017-01-14 10:15:14','2017-01-14 10:15:14','### 心之力\n[毛泽东　丁巳，夏孟，民国六年]\n\n　　宇宙即我心，我心即宇宙。细微至发梢，宏大至天地。世界、宇宙乃至万物皆为思维心力所驱使。博古观今，尤知人类之所以为世间万物之灵长，实为天地间心力最致力于进化者也。夫中华悠悠古国，人文始祖，之所以为万国文明正义道德之始创立者，实为尘世诸国中最致力于人类与天地万物精神相互养塑者也。盖神州中华，之所以为地球优雅文明之发祥渊源，实为诸人种之最致力于人与社会、天地间公德良知依存共和之道者也。古中华历代先贤道法自然，文武兼备，运筹天下，何等之挥洒自如，何等之英杰伟伦。\n\n　　然天妒神州，外侵内乱，泱泱华夏，愚昧丛生，国人于邪魔强盗阴险心力渗透、攻击治下，神圣使命渐渐失忆，煌煌中华民众却败于众生甘愿自卑、沉沦、散弱之积弊。五千年中央神州屹立环宇，慈润天道，德化昆仑，逐忘除魔灭盗之大道使命。待魔鬼而好生，如东郭之饲狼，渐失土于广袤，魔盗全球侵杀，血罪滔天，贪婪残暴，伪善阴险，愚克己隐忍，憨良感化，以善招恶，如鱼肉怂恿魔盗之刀俎。\n\n　　纵览千百年世界万国者，以其心行观其本性──如恶魔强盗者，唯有西方诸国；其嗜血之恶贯满盈，如非魔盗，则绝无他国可称之为魔盗流氓。如神侠义士者，惟有神州中华；其中庸之尊道重德，如非神侠，则绝无他国可称之为神侠圣贤。神侠圣贤，乃悟创农耕生产经济之始祖，勤劳耕作，取舍有度，好生求德，修身养性，良善处世，信仰天人合一之大道。魔盗流氓，乃阴险、伪善、劫掠、杀戮之恶徒；不悟耕种，贪婪猖獗，残暴凶险，横征暴敛，敷衍游牧，笃信寄生剥削之妖道。神侠与魔盗，自开天辟地即为死敌。神侠生养而魔盗毁灭，势同水火，形同白昼与黑夜。此乃宇宙间光明与黑暗之决断，生存与死亡之厮杀，智者断不可轻信两者之平安以待。\n\n　　忠奸分善恶，史实辩正邪，生杀断神魔。神魔与正邪自古由来，角力争斗，幻化人间光明与黑暗之搏杀。惟天道昭然，邪终不可胜正。故神侠稍有振作，即可灭魔除盗，切不可胆怯生畏，更不可投贼！神魔厮杀非生即死，永难消泯。故神侠终为魔盗死敌，若昏然求和必招自戕。魔盗皆以亡我为本恶，神侠当以灭魔为本义，世代相传，不可懈怠。\n\n　　国弱君愚则国破，外侵内斗，有德者心力与物力难济，空有济世情怀。无德者无耻与无畏沆瀣，实为欺世盗贼。丑恶者霸拥民众赋权，神器私用，愚钝者尽情尸位素餐，祸国殃民。贪腐官僚国贼举家富贵，万众民脂民膏皆被劫掠。\n\n　　民心民生衰，则国力日衰，国力衰则国家民族之心力亦衰！内可诱发天灾兵祸，朝代更迭，官僚、商贾、农工、学者皆难免沉沦，岂有完卵？外可唆引强盗侵犯，奴役掠夺，国贼、汉奸、军民、学生均家破人亡，终无善果。迁居蛮夷国度者，神州子民多寄人篱下，世代受辱，命利不保。\n\n　　数十年来，神州大地屡受残暴侵杀，国库民资尽被阴险抢劫。甲午海战、八国联军、廿一条……不平等诸般卖国条约卑下怯弱，引狼入室，资敌来犯，实为召唤、鼓励蛮夷强盗分食神州华夏之举，此昏君国贼祸民之罪。\n\n　　与蛮夷通商者使洋货泛滥，居高居奇，国人尽被盘剥。泱泱中华竟无力生产民众生活诸品，更无些许官僚执权以为民众之艰辛解忧。世界诸魔盗在中国如入空境，颇有斩获，无不为惊叹神州可欺。故恶敌觊觎长存、亡我之心不死，只有寻机死战拒敌，方可换得暂时太平。炎炎烈战未开，巍巍国耻未雪，则蛮夷、豺狼、凶魔如食甘饴，纷沓而至。\n\n　　洋奴横行、汉奸猖獗，国民皆因腐败汉奸、官僚、军阀、买办家族合力卖国而所欠洋人无尽之亡国债务而自危。国体破败，军阀割据，混战连年，国债深陷，物价飞涨，食宿艰难，灾厄连连，何日可止？今满清鞑虏虽败，可恨国家、政治、经济均被愚昧独夫、洋奴把持，国民心力沉疴羸弱，蛮夷恶敌肆意摧残，恍惚间，惊见万民为奴，国资殆尽。\n\n　　若欲救民治国，兴中华英武，虽百废待兴，可铸奇造伟，成我辈绝伦。救国救民计，惟有自强国民心力之道乃首要纲领，然民众思维心力变新、强悍者，是为首要之捷径！心力变新、强悍者，首应破除封建、官僚愚昧邪道，惩治卖国、汉奸、洋买办之洋奴愚众，明戒其不义浮财罚入公帑，暗布其家族子女皆无善终，方可尽教化威慑之道。\n\n　　举世兴原创睿智，立国显始做宏略。国家民族之新生心力志向，必缔造世界仁德勇武文明之新学，新学为思想理论之基石、栋梁，新学不兴，御敌难成，则洋奴必兴亡国。西方学教均显邪佞，如若任其纵横世间，则人文尽毁。如神州中华新学宏论，集古今大成之时，必为人类之新邦。中华古国之敌，皆为西方邪恶之魔盗与汉奸，与倭寇同仇，此仇无解，倍当警惕，方可自救而救人，万勿混淆。\n\n　　今力主洋务之事应借鉴“师夷之长以制夷”之道，尽知“非我族类其心必异，非我族者其性必恶”之祖训。与洋盗交往，睚眦必报，以霹雳睿智显纵横捭阖，击杀敌酋，方可博取中华国邦民众之自强尊严与资赟。细观西方魔盗侵杀之秘，以掠夺财富之技巧攫取全球侵杀之辎重，以伪善之攻心宗教幻化万国奴役之中枢。故无数肖小愚昧弱国之政客尽被蛊惑麻痹，以自卑万漏国体媚洋为奴，贱卖民脂国魂。\n\n　　研魔盗纵民强国之道，均为结党外扩之策。我泱泱中华，不可效仿魔盗船坚炮利之全球侵杀，大可创新神侠互助友爱之世界改良。凡团结对外者，无论兹善罪恶，均为消除内斗与外辱之上策。此攘外策，为兴国智者之深谙。恶魔群盗当世，中华焉能以一国一隅而强盛？又焉能以求和退让之宋赵腐朽之自残苟且偷生，妄想与魔盗流氓自守君子相交之道德！凡此皆为出卖国家、祸害民众之国贼。惟有举环球反击魔盗之大旗，方可行强国富民之拒敌谋略。不谋全局者不足于谋一隅，不谋万世者不足与谋一时，我等岂可独坐井底。\n\n　　留洋之风，不可放纵，国学之巅，大有裨益。故救国者必在国内，留洋者志不可晦。留洋列强之同胞漂泊海外，须警惕邪魔强盗 对我正义灵魂之误导、侵扰，有如寒冬之防风，病弱之辟邪。女者学子，当尤为养护心志。攻防有度，张弛有道，则洋奴、汉奸、倭寇难以得手，自无处安身。留学之天道睿智，在于研思魔盗千百年劫掠奴役神州良善国民之天工、性命、财产，累积淫巧技器之盗贼罪证，追索群魔偿还之赎罪。尤以识破阴险隐晦思想学术和蛊惑心力为紧要，破除愚弄。反思神州隐忍求和之萎靡，复兴中华英勇卫道之刚猛，谋造赶超魔盗之捷径，创新攫取贼物之奇术。解禁民众有志者向上晋升之途径，清新吏治，转移民志与极权之冲撞；释放民意，滋润民生，嘉奖平民廉洁为公者以公权贡献。中华栋梁必生自主自强之新象，设抗御蛮夷强盗杀戮之预防策，扬神州民众富国雄军之壮志，恤民生福祉农工商学之滋养。开创新学润养新民，辅以新民楷模国民──文以德攻，武以勇助，抗击蛮夷列强剿灭中华神圣传承之奸计，继承万国大同神圣文明之志向，履行正义道德教化优靖之使命。\n\n　　夫闻“三军可夺其帅，匹夫不可夺其志”，志者心之力也。民之志首推国家民众个性之天然强健，则国家栋梁层出不穷。数百年外侮内斗中民众个性屡被君主、官僚残害之积弊甚重，国民心性身体多有贻害，民之弱即国之弱。举国凡有压抑个人、违背国民个性者，罪莫大焉！故我国三纲所在必去，愚民愚治尽除，方有优塑民众强盛之希冀。\n\n　　自中国开埠以来，封建、官僚、愚民、洋务祸国殃民，究其缘由，而教会、资本家、君主、卖国贼四者为内四贼，四贼结伴，犹如鬼魅食人之联盟，皆同为天下恶魔强盗者也。四贼之中，尤以执掌政权之官僚堂为祸首！盖国之神圣重器以民为先，决不可助长恶私贪欲窃为己用！国之中枢如有愚昧肤浅肖小之徒窃而居之，则外魔必侵，国民必衰亡。\n\n　　亡我中华之心不死者，有外四贼之巨敌，千年来侵寐卧榻，中华灾难皆源于此，外四贼乃倭寇王室、魔盗人种之犹太邪教及衍生诸教魁首、欧洲强盗王室、周边忤逆背叛之肖小诸国之王室家族。均杀我之心、掳我之身、劫我之财，为神州中华复仇、雪耻、扬威之强劲恶敌。须清算史实锱铢，必较以传授我辈世世代代，切忌遗忘。可以兵法之诡道重创之，辅以新兴之道德良知信仰同化之，方为多管齐下攻防策。\n\n　　自满清鞑虏洋务运动之后，贪墨腐败家族皆以盗取、盘剥民脂民膏逃逸海外，为家族享乐之诡计。假以时日，神州中华亿万民众祖辈之福祉乃至血肉、骨髓，将被尽数剥夺转送西方魔盗与贪腐家族！国人如寒冬之时又堕深渊，垂死之躯更遭荼毒。农业之国民众落后狭隘，必将沦落为亡国之奴。而劫掠国民财富者逃逸海外，更无人于海内查处、治罪，亦无人于海外统计、堵截，故国贼前赴后继，趋之若鹜。吾辈倘若不能惩戒，又与倭寇、魔盗、国贼、禽兽何异？\n\n　　远观三国乱世以来，南北朝五胡屠杀险些灭绝中华，幸有天赐之英烈冉闵救国救民；唐虽富强亦被蛮夷安禄山渗透，尚有神族之战将维护破旧山河；宋朝轻武重文惧外而厉内，为外敌大肆侵杀之根本；明朝倭寇猖獗，屡有进犯，终成明朝衰败源头；元清鞑虏更是举国之力豢养众多汉奸，始为亡国灭族之端始。故汉奸、国贼终为中国羸弱之症结所在。\n\n　　汉奸、国贼亦分三类：一者乃倭寇和魔盗之奸细，伪作教士、行商、学者潜进中华伺机而动；二者乃有意被敌国、邪教收买笼络，甘愿卖国求荣者；三者愚昧、狭隘、自卑而媚外蔑内，与无知中被误导利用，大行卖国害民之实者。凡三类者，均为国家民族之公敌，应有教育淳化之良策，惩前毖后，精研规律，树立标榜，方为中兴并永绝汉奸之肃反纲常。\n\n　　今愚者忘本堕渊，竟争先自掘其坟，却不思国家民族社稷危亡之计。苟活于当下，遗失神圣之使命，忘却民族之重任；背离于真理，违逆人本之慧根，蔑毁先民之道德；醉心于享乐，不知当世之惊变，甘当媚外之洋奴；沉迷于自我，罔顾危机之四伏，轻信魔盗之谗言！故西方与倭寇强盗皆可肆意侵杀、掠夺、奴役我汉唐中华，犹如进无人之境界。\n\n　　千古圣人，教化为根。我辈恰逢此乱象当前之世，人皆逐物欲而迷心，循末节而忘真，醉娱乐轻国志，谋小私绝大利，认蛮夷做乃父，拜魔盗为师尊，任倭寇以渗侵，毁文明于无耻。你我又岂能苟且偷生，熟视无睹？国家存亡之关头，有志者呼吸难畅，应以天下为己任，拯救黎民于水火。\n\n　　普看当今，世界格局风云激荡，人类文明之前途扑朔渺茫，天下苍生之幸福岌岌可危。虽有科技带来物质之充足，仍难满人欲之巨壑，各派皆为私利而竞相奔走，人人皆被牵入滚滚洪流。强盗流氓制订裁决世界野蛮法律，邪恶魔鬼公然成为人间伪善领袖，万国不思兴道义之师，竟全然拜魔盗为导师，此星球之一草一木万物生灵涂炭、灭绝之期不远矣。\n\n　　虽有智者、勇者愿做中流之砥柱，却犹如闹市之人语，瀑下之鱼鸣。请问周边，还有几人执著于真理？还有几人探求于本源？一句开心就好，便甘愿随波逐流；一句事不关己，便通行四海愚夫；一句莫谈国事，便据民权为私器。孰不知天下兴亡匹夫有责？试问为天地立心何以立？为生民立命何以立？为往圣继绝学何以继？为万世开太平何以开？若我辈之人此心已无，则中华即将亡亦！中华亡则人类必亡亦！\n\n　　如欲拯救中华，必兴尚武兴业之道。以君子之奇志，出鬼神之奇兵；以雷霆之手段，灭军阀之割据；定大同之策略，削散乱之议政；创善正之强党，避百党之贻害；歼侵略之恶敌，除卖国之汉贼；闭弱国之门户，养国疾之复苏；健民志塑身心，修工农重产业；补国民之元神，育神州之强盛。天地间民心不可欺，志者心力，应以修养民众生息为上旨。志者心智，应以洞悉魔盗本质为君道，行强国之捷径。\n\n　　强国之道首推荡涤恶私旧序，纵容平民之天心。万民身心志趣勃发，可育大国中兴之实。诸政党应体察入微，谋国民人均有职业，助大众妇孺可读书，倡百工除旱洪瘟疫，灭官僚随处耀淫威，令贪腐时刻有监督，练天兵全球勇神通。而机器之发明制造，皆为心力之无拘无束，借鉴自创尽可勃发。破解魔盗绝密思维，居高环视西学诀窍，无敌独尊心力所达，即可瞬间助长科技。贵在学思自新，独辟奇径。心力常新，寻魔盗科技之死穴猛击，则新技可灭敌而自强。\n\n　　男者为国家肌体，强壮筋骨，护扩兴业，必行修身、齐家、治国、平天下之志。时下中华神族男者外不敌魔盗，内不查汉奸，沉迷物质与精神鸦片之自虐，盲然羡慕魔盗之所有，多自轻自贱之空虚，则生养之后嗣如何自强？女者为民族经脉，滋补神识，孕育种族，必兴优生优育贤助创大业之情。当今中央神族女者于身心缠足，拒识文断字，遑论无才，兴封闭愚泼之自残，竟然蔑视神族之男胞，行认贼为君之愚昧，则孕育之后嗣如何自立？国之女者自卑，则孕育皆为自卑！吾观魔盗侵杀之处，奴役灭绝男丁，蛊惑奸杀女子，目的竟为彻底亡国换种，如此女者身心孕育绝非小我之私情，养育子女辅助男者皆为大我之育国，亟待创新妇道之学。是故强国策当以男者英勇善战乐于思学，女者释放身心勤于贤淑之点滴践行。外可敌魔盗摧枯拉朽之强悍亡我之势，内可悟中华诸般灾难皆源于魔盗唆使。智慧明通，则趋吉避凶。神侠与魔盗必多有决战，邪不侵正，我辈决不可遗忘正义使命。\n\n　　天之力莫大于日，地之力莫大于电，人之力莫大于心。阳气发处，金石亦透，精神一到，何事不成？改朝换代，为民谋福，惩治贪墨汉奸，又有何难！苟其公忠体国，百折不回，虽布衣下士，未始无转移世运之能也。有志之士可不勉哉！心之力即思维愿力，乘大道者足可彰显奇力，塑天国威武，点石成金，抟泥成兵，修国体为金汤，炼万民如神将。虽有邪魔妖军，又岂能撼动巍巍中华，朗朗乾坤。\n\n　　人生于天地之间，形而下者曰血肉之躯，形而上者曰真心实性。血肉者化物质之所成，心性者先天地之所生。故而有唯物唯心之论说。人活于世间，血肉乃器具，心性为主使，神志为天道。血肉现生灭之相，心性存不变之质，一切有灵生命皆与此理不悖。盖古今所有文明之真相，皆发于心性而成于物质。德政、文学、艺术、器物乃至个人所作所为均为愿、欲、情等驱使所生，精悟则可改天换地。\n\n　　故个人有何心性即外表为其生活，团体有何心性即外表为其事业，国家有何心性即外表为其文明，众生有何心性即外表为其业力果报。故心为形成世间器物之原力，佛曰：心生种种法生，心灭种种法灭。故印度佛教亡于消极心灭。\n\n　　西方强盗宗教亦有旧约主神虐民之邪暴，后有耶稣新约爱民之佛性改良。神魔心性之变幻如此，故世人多为耶稣所迷。佛者人弗，弗即非也，言佛性弊弱。耶稣明之故说忏悔，懂耻而不恶；孔子明之故说修心，知止而不怠；释迦明之故说三乘，明心而不愚；老子明之故说无为，清静而不私。时下佛洋皆外来之教，洋教大兴则神州道教日渐式微。\n\n　　心为万力之本，由内向外则可生善，可生恶，可创造，可破坏。由外向内则可染污，可牵引，可顺受，可违逆。修之以正则可造化众生，修之以邪则能涂炭生灵。心之伟力如斯，国士者不可不察。大丈夫立天地间，借浩然正气养明德之志向，调天道大能塑强国之心力，即显官圣民正奇效。\n\n　　大凡英雄豪杰之行其自己也，确立伟志，发其动力，奋发踔厉，摧陷廓清，一往无前。其强大如大风之发于长合，如好色者朱之性 欲发动而寻其情人，决无有能阻回之者，亦决不可有阻者。尚阻回之，则势力消失矣。\n\n　　吾尝观大来勇将之在战阵，有万夫莫当之概，发横之人，其力至猛，皆由其一无顾忌，其动力为直线之进行，无阻回无消失，所以至刚而至强也。众生心性本同，豪杰之精神与圣贤之精神亦然，救国者为王为圣之道亦然。\n\n　　故当世青年之责任，在承前启后继古圣百家之所长，开放胸怀融东西文明之精粹，新研奇巧技器胜列强之产业，与时俱进应当世时局之变幻，解放思想创一代精神之伟烈。破教派之桎梏，汇科学之精华，树强国之楷模，布真理与天下！今正本清源，愿与志同道合，追求济世、救世真理者携手共进。发此弘愿，世世不辍，贡献身心，护持正义道德。\n\n　　故吾辈任重而道远，若能立此大心，聚爱成行，则此荧荧之光必点通天之亮，星星之火必成燎原之势，翻天覆地，扭转乾坤。戒海内贪腐之国贼，惩海外汉奸之子嗣；养万民经济之财富，兴大国农工之格局；开仁武世界之先河，灭魔盗国际之基石；创中华新纪之强国，造国民千秋之福祉；兴神州万代之盛世，开全球永久之太平！也未为不可。\n\n\n　　[后附誊抄者按语]\n\n　　《心之力》全篇，三十九段，计陆佰三十九句，总陆仟二百伍拾叁余字。\n\n　　誊抄于戊寅年春。国难当头，如坠深渊，借阅宏著，醍醐灌顶。倍感润之救国奇智。遥望祈祝我一师、毛奇，天眷无恙。\n\n　　［注］为便于今人阅读，文中个别标点略有改动。并将原件抄错一字改正：“愚昧业(業)生”应为“愚昧丛(叢)生”。','心之力','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(44,1,'2016-10-17 17:10:24','2016-10-18 01:10:24','Welcome to WordPress. This is your first post. Edit or delete it, then start writing!','Hello world!','','inherit','closed','closed','','1-revision-v1','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',1,'http://115.28.81.19/2016/10/17/1-revision-v1/',0,'revision','',0),(17,1,'2015-10-27 22:15:00','2015-10-27 22:15:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>xp=====(一直找不到。。原来右边是可以下拉的)..</p>&#13;\n<p><img src=\"http://img.blog.csdn.net/20151027221344338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /><br /></p>&#13;\n<p><br /></p>&#13;\n<p>linux  ibus-----</p>&#13;\n<p>设置---直接按下Ctrl+Shift+Space</p>&#13;\n   &#13;\n</div>','各系统下设置输入法按键为ctrl+shift+space','','publish','open','open','','%e5%90%84%e7%b3%bb%e7%bb%9f%e4%b8%8b%e8%ae%be%e7%bd%ae%e8%be%93%e5%85%a5%e6%b3%95%e6%8c%89%e9%94%ae%e4%b8%bactrl%2bshift%2bspace','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/10/27/%e5%90%84%e7%b3%bb%e7%bb%9f%e4%b8%8b%e8%ae%be%e7%bd%ae%e8%be%93%e5%85%a5%e6%b3%95%e6%8c%89%e9%94%ae%e4%b8%bactrl%2bshift%2bspace/',0,'post','',0),(19,1,'2015-10-26 23:27:00','2015-10-26 23:27:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>首选项---主菜单--   即是alacarte..</p>&#13;\n<p><br /></p>&#13;\n<p>centos ===安装  alacarte.noarch 0:0.12.4-1.el6 即可。<br /></p>&#13;\n   &#13;\n</div>','Centos安装gnome主菜单编辑器无','','publish','open','open','','centos%e5%ae%89%e8%a3%85gnome%e4%b8%bb%e8%8f%9c%e5%8d%95%e7%bc%96%e8%be%91%e5%99%a8%e6%97%a0','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/10/26/centos%e5%ae%89%e8%a3%85gnome%e4%b8%bb%e8%8f%9c%e5%8d%95%e7%bc%96%e8%be%91%e5%99%a8%e6%97%a0/',0,'post','',0),(21,1,'2015-10-17 19:36:00','2015-10-17 19:36:00','[TOC]\n\n## 无JsBridge\n -  js如果要调用java(native、也说原生)方法:则java必须实现js接口供挂载在window对象上供js来执行。这里简单的可以只调用，调用后java端什么也不做。复杂的调用可以是js调用了java端，然后java用loadUrl(\"javascript:\")继续调用js，这里的调用可以是上一个js调用java的回调，也可以是一个纯js，也可以是下一个js调用java。\n -  java调用js就简单多了,都是用的loadUrl(\"javascript:XXX\")。这里也可以在js串加入调用java作为回调。\n \n## 基于JsBridge\n -  java(native)调用js,方法还是loadUrl,但是jsbridge在这个基础上封装了下,封装成了callHandler(String handlerName, String data, CallBackFunction callBack) \n -  js调用java就不用接口了，而是使用一个隐藏的iframe。通过变更src路径，java端webview上拦截这个变更来实现js调用java.\n -  src:https://github.com/lzyzsd/JsBridge\n \nJsBridge example:\n ```java\nwebView.callHandler(\"functionInJs\", \"data from Java\",\n    new CallBackFunction() {\n\n        @Override\n        public void onCallBack(String data) {\n            // TODO Auto-generated method stub\n            Log.i(TAG, \"reponse data from js \" + data);\n        }\n\n    });\n```\n\n这里三个参数，第三个是作为回调的，成功后会调用这个对象里的onCallBack方法。\n\n```java\npublic void callHandler(String handlerName, String data, CallBackFunction callBack) {\n    doSend(handlerName, data, callBack);\n}\n```\n直接跳到doSend方法\n ```java\nprivate void doSend(String handlerName, String data, CallBackFunction responseCallback) {\n        Message m = new Message();\n        if (!TextUtils.isEmpty(data)) {\n            m.setData(data);\n        }\n        if (responseCallback != null) {\n            String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT, ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));\n            responseCallbacks.put(callbackStr, responseCallback); //responseCallbacks数组存回调对象\n            m.setCallbackId(callbackStr);  //数据塞在message对象中\n        }\n        if (!TextUtils.isEmpty(handlerName)) {  //handler不为空就把他设置给message对象\n            m.setHandlerName(handlerName);\n        }\n        queueMessage(m);\n    }\n```\n创建message对象并queueMessage处理,   回调对象入responseCallbacks(Map)\n\n```java\nprivate void queueMessage(Message m) {\n    if (startupMessage != null) { //startupMessage不为空的时候\n        startupMessage.add(m);//message对象加入列表\n    } else {\n        dispatchMessage(m); //这里派遣(发出)信息--向js\n    }\n}\n```\n这里startupMessage是否为空呢？看这里:\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n\n    if (toLoadJs != null) {\n        BridgeUtil.webViewLoadLocalJs(view, toLoadJs);\n    }\n\n    //\n    if (startupMessage != null) {\n        for (Message m : startupMessage) {\n            dispatchMessage(m);\n        }\n        startupMessage = null;\n    }\n}\n```\n这个方法是在webview加载完后执行，必然会把startupMessage置为null,那么到了\ndispatchMessage这个方法...   英文意思是派遣消息,是？\n\n```java\nprivate void dispatchMessage(Message m) {\n    String messageJson = m.toJson();\n    //escape special characters for json string\n    messageJson = messageJson.replaceAll(\"(\\\\\\\\)([^utrn])\", \"\\\\\\\\\\\\\\\\$1$2\");\n    messageJson = messageJson.replaceAll(\"(?<=[^\\\\\\\\])(\\\")\", \"\\\\\\\\\\\"\");\n   // JS_HANDLE_MESSAGE_FROM_JAVA==\"javascript:WebViewJavascriptBridge._handleMessageFromNative(\'%s\');\"\n   //javascriptCommand==javascript:WebViewJavascriptBridge._handleMessageFromNative(\'{\\\"data\\\":\\\"data from Java\\\",\\\"handlerName\\\":\\\"functionInJs\\\",\\\"callbackId\\\":\\\"JAVA_CB_3_2640\\\"}\');\n    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);\n    if (Thread.currentThread() == Looper.getMainLooper().getThread()) {\n        this.loadUrl(javascriptCommand);  //java这里主线程执行js\n    }\n}\n```\n\n把message对象转为json处理，BridgeUtil里面声明了final static String JS_HANDLE_MESSAGE_FROM_JAVA = \"javascript:WebViewJavascriptBridge._handleMessageFromNative(\'%s\');\"; 最终处理后需要loadUrl的字符串如上，我们可以知道最终会调用_handleMessageFromNative方法处理，并带上json串：{\\\"data\\\":\\\"data from Java\\\",\\\"handlerName\\\":\\\"functionInJs\\\",\\\"callbackId\\\":\\\"JAVA_CB_3_2640\\\"}\n现在来看这个js方法：// 提供给native调用,receiveMessageQueue 在会在页面加载完后赋值为null,所以\n\n```js\nfunction _handleMessageFromNative(messageJSON) {\n    if (receiveMessageQueue) {\n        receiveMessageQueue.push(messageJSON);\n    } else {\n        _dispatchMessageFromNative(messageJSON);\n    }\n}\n```\n 作者提供的代码说了，这个跟startMessage一样,receiveMessageQueue会在页面加载完后置为null.继续_dispatchMessageFromNative\n// 提供给native使用,\n\n```js\nfunction _dispatchMessageFromNative(messageJSON) {  //native -doSend..后loadUrl(js这个方法)-获取json数据\n        setTimeout(function() {\n            var message = JSON.parse(messageJSON);\n            var responseCallback;\n            // java call finished, now need to call js callback function\n            if (message.responseId) {  //没有responseId to else\n                responseCallback = responseCallbacks[message.responseId];\n                if (!responseCallback) {\n                    return;\n                }\n                responseCallback(message.responseData);\n                delete responseCallbacks[message.responseId];\n            } else {\n                // 直接发送\n                if (message.callbackId) {\n                    var callbackResponseId = message.callbackId;\n                    responseCallback = function(responseData) {\n                        _doSend({\n                            responseId : callbackResponseId, //响应javaId:JAVA_CB_3_2640\n                            responseData : responseData\n                        });\n                    };\n                }\n\n                var handler = WebViewJavascriptBridge._messageHandler;\n                if (message.handlerName) {\n                    handler = messageHandlers[message.handlerName];//handler名是functionJs\n                }\n                // 查找指定handler\n                try {\n                    handler(message.data, responseCallback);\n                } catch (exception) {\n                    if (typeof console != \'undefined\') {\n                        console\n                                .log(\n                                        \"WebViewJavascriptBridge: WARNING: javascript handler threw.\",\n                                        message, exception);\n                    }\n                }\n            }\n        });\n    }\n```\n\n上面的加了注释不难理解，有2句解释下：\n\nhandler = messageHandlers[message.handlerName];//handler名是functionJs\n\n这里jsbridge在启动的时候有这段:\n\n```js\nbridge.registerHandler(\"functionInJs\", function (data, responseCallback) {\n    document.getElementById(\"show\").innerHTML = (\"data from Java: = \" + data);\n    var responseData = \"Javascript Says Right back aka!\";\n    responseCallback(responseData);\n});\n```\n这里会注册这个functioinJs方法:所以上面获得的是这里定义的方法.所以后面的\n\nhandler(message.data, responseCallback);\n\ndata就是前面java里面封装的data,responseCallBack是上面的\n\n```js\nresponseCallback = function(responseData) {\n    _doSend({\n        responseId : callbackResponseId, //响应javaId:JAVA_CB_3_2640\n        responseData : responseData\n    });\n};\n```\n\n他是作为数据在id为show的div上显示数据后要回调的方法。现在数据显示出来了，我们知道了，这里的responseId,responseData是上面的一个\n\n```js\n var responseData = \"Javascript Says Right back aka!\";\n```\n\n转到_doSend方法:\n\n```js\n// sendMessage add message, 触发native处理 sendMessage\nfunction _doSend(message, responseCallback) {\n    if (responseCallback) {\n        var callbackId = \'cb_\' + (uniqueId++) + \'_\' + new Date().getTime();\n        responseCallbacks[callbackId] = responseCallback;//这里在js端存储JAVA_CB_3_2640作为js  callbackId的属性\n        message.callbackId = callbackId;//待发送的信息里面存储了一个刚才生成的js  callbackId\n    }\n\n    sendMessageQueue.push(message); //把这个message放入sendMessageQueue数组中.\n    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + \'://\'\n            + QUEUE_HAS_MESSAGE;   //这里变更iframe的src属性,这样会触发Java端WebViewClient的shouldOverrideUrlLoading方法执行\n}\n```\n\n下面转到shouldOverrideUrlLoading方法.\n\n```java\npublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n        try {\n            url = URLDecoder.decode(url, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        if (url.startsWith(BridgeUtil.YY_RETURN_DATA)) { // 如果是返回数据 _fetchQueue\n            handlerReturnData(url);\n            return true;\n        } else if (url.startsWith(BridgeUtil.YY_OVERRIDE_SCHEMA)) { //第一次 _doSend/////\n            flushMessageQueue();\n            return true;\n        } else {\n            return super.shouldOverrideUrlLoading(view, url);\n        }\n    }\n```\n....','基于android混合开发的JsBridge技术学习','','publish','open','open','','%e5%9f%ba%e4%ba%8eandroid%e6%b7%b7%e5%90%88%e5%bc%80%e5%8f%91%e7%9a%84jsbridge%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/10/17/%e5%9f%ba%e4%ba%8eandroid%e6%b7%b7%e5%90%88%e5%bc%80%e5%8f%91%e7%9a%84jsbridge%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0/',0,'post','',0),(23,1,'2015-07-26 11:54:00','2015-07-26 11:54:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>环境：系统Centos6.6   硬件环境 SAMSUNG RV420<br /></p>&#13;\n<p>1、错误信息记录位置查看<span style=\"color:#FF0000\">find /var/log -type f|xargs grep \"00:0b\" </span>   <br /></p>&#13;\n<p>关键字也可以选择CRS<br /></p>&#13;\n<p>[root@door toor]# find /var/log -type f|xargs grep \"00:0b\"  (使用最高权限查看，权限低 会拒绝find指令的查看)<br /></p>&#13;\n/var/log/messages:Jul 26 11:35:17 door kernel: pnp 00:0b: can\'t evaluate _CRS: 8<br />&#13;\n/var/log/dmesg:pnp 00:0b: can\'t evaluate _CRS: 8<br /><p>/var/log/dmesg:pnp 00:0b: Plug and Play ACPI device, IDs PNP0c01 (active)</p>&#13;\n<p><br /></p>&#13;\n<p>2、查看错误详细信息<span style=\"color:#FF0000\">:sudo gedit /var/log/messages</span>    (编辑器随便吧)</p>&#13;\n<p><br /></p>&#13;\n<p>Ctrl+F 定位到“CRS“</p>&#13;\n<p>这段信息是有用的：</p>&#13;\n<p>Jul 26 11:35:17 door kernel: pnp: PnP ACPI init  （PnP：即插即用，ACPI：高级电源管理接口)  ---初始化<br />&#13;\nJul 26 11:35:17 door kernel: ACPI: bus type pnp registered<br />&#13;\nJul 26 11:35:17 door kernel: ACPI Warning for \\_SB_.MEM2._CRS: Return type mismatch - found Integer, expected Buffer (20090903/nspredef-1018)<br />&#13;\nJul 26 11:35:17 door kernel: ACPI Error (uteval-0310): Return object type is incorrect [\\_SB_.MEM2._CRS] (Node f705e620), AE_TYPE<br />&#13;\nJul 26 11:35:17 door kernel: ACPI Error: Type returned from _CRS was incorrect: Integer, expected Btypes: 0x4 (20090903/uteval-316)<br />&#13;\nJul 26 11:35:17 door kernel: pnp 00:0b: can\'t evaluate _CRS: 8<br />&#13;\nJul 26 11:35:17 door kernel: pnp: PnP ACPI: found 12 devices  --发现了12个设置<br />&#13;\nJul 26 11:35:17 door kernel: ACPI: ACPI bus type pnp unregistered  --注册失败了一个</p>&#13;\n<p><br /></p>&#13;\n<p>开始使用acpi=off 加到内核参数上，开机错误任在，鼠标移动不流畅了！！这里应该是还注册了其他设备的原因。</p>&#13;\n<p><br /></p>&#13;\n<p>参考内核参数这：<a target=\"_blank\" href=\"http://www.jinbuguo.com/kernel/boot_parameters.html\">http://www.jinbuguo.com/kernel/boot_parameters.html</a><br /></p>&#13;\n<p>发现这个地方找到这个参数：</p>&#13;\n<p></p>&#13;\n<dl><dt>pnpacpi=off</dt><dd>禁用ACPI的即插即用功能，转而使用古董的PNPBIOS来代替。</dd></dl>&#13;\n然后第三步&#13;\n<p></p>&#13;\n<p>3、 sudo gedit  /boot/grub/grub.conf</p>&#13;\n<p><br /></p>&#13;\n<p>title CentOS 6 (2.6.32-504.el6.i686)<br />&#13;\n    root (hd0,3)<br />&#13;\n    kernel /vmlinuz-2.6.32-504.el6.i686 ro root=UUID=33b23ad2-f922-4329-8f8f-f3a145147587 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM  <span style=\"color:#FF0000\">pnpacpi=off</span><br />&#13;\n    initrd /initramfs-2.6.32-504.el6.i686.img<br />&#13;\ntitle Other System<br />&#13;\n    rootnoverify (hd0,0)<br />&#13;\n    chainloader +1</p>&#13;\n<p><br /></p>&#13;\n<p>把日志 都删除root shell: <span style=\"color:#FF0000\">find /var/log -type f -exec rm -v  {} \\;  </span>          (分号要有的)<br /></p>&#13;\n<p>保存，重启， 再试一次   find /var/log -type f|xargs grep \"00:0b\"   这时候啥也没了！！！到此错误解决。<br /></p>&#13;\n<p><br /></p>&#13;\n   &#13;\n</div>','使用centos引导内核错误：kernel: pnp 00:0b: can\'t evaluate _CRS: 8','','publish','open','open','','%e4%bd%bf%e7%94%a8centos%e5%bc%95%e5%af%bc%e5%86%85%e6%a0%b8%e9%94%99%e8%af%af%ef%bc%9akernel%3apnp00%3a0b%3acan%27tevaluate_crs%3a8','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/07/26/%e4%bd%bf%e7%94%a8centos%e5%bc%95%e5%af%bc%e5%86%85%e6%a0%b8%e9%94%99%e8%af%af%ef%bc%9akernel%3apnp00%3a0b%3acan%27tevaluate_crs%3a8/',0,'post','',0),(25,1,'2015-07-11 21:25:00','2015-07-11 21:25:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>mysql错误解决：</p>&#13;\n<p>先 参考：http://www.jb51.net/article/48625.htm</p>&#13;\n<p>参考第四条：<br /></p>&#13;\n<p>mysql在启动时没有指定配置文件时会使用/etc/my.cnf配置文件，请打开这个文件查看在[mysqld]节下有没有指定数据目录(datadir)。</p>&#13;\n<p>mysql版本：mysql  Ver 14.14 Distrib 5.5.44, for linux2.6 (i686) using readline 5.1<br /><br /><br /></p>&#13;\n<p>错误原因：my.conf放置在/etc目录下，当安装mysql-admin（mysql客户端，里面包含了mysql-common等包，）后，， 问题出现</p>&#13;\n<p>toor@door:/lib$ sudo /etc/init.d/mysql.server start<br />&#13;\nStarting MySQL<br /><span style=\"color:#FF0000\">. * The server quit without updating PID file (/var/lib/mysql/door.pid).</span><br />&#13;\ntoor@door:/lib$ clear<br /></p>&#13;\n<p>然后卸载mysql-admin(同时相应的包也卸载掉了）：<br /></p>&#13;\n<p>toor@door:/lib$ sudo /etc/init.d/mysql.server start<br /><span style=\"color:#FF0000\">/usr/local/mysql/bin/my_print_defaults: Can\'t read dir of \'/etc/mysql/conf.d/\' (Errcode: 2)</span>  &#13;\n<br />&#13;\nFatal error in defaults handling. Program aborted<br />&#13;\nStarting MySQL<br /><span style=\"color:#FF0000\">. * The server quit without updating PID file (/usr/local/mysql/data/door.pid).</span><br />&#13;\ntoor@door:/lib$ cd /etc/<br />&#13;\ntoor@door:/etc$ ls |grep mysql<br />&#13;\nmysql<br />&#13;\ntoor@door:/etc$ cd mysql/<br />&#13;\ntoor@door:/etc/mysql$ ls<br /><span style=\"color:#FF0000\">my.cnf</span><br />&#13;\n问题发生变化！</p>&#13;\n<p><br /></p>&#13;\n<p>然后再安装mysql-admin客户端</p>&#13;\n<p>toor@door:/lib$ sudo /etc/init.d/mysql.server start<br />&#13;\nStarting MySQL<br /><span style=\"color:#FF0000\">. * The server quit without updating PID file (/var/lib/mysql/door.pid).</span><br /></p>&#13;\n<p>然后把/etc目录下的my.conf文件移动到/etc/mysql/目录下（这里覆盖了安装某些包生成的默认my.cnf文件。</p>&#13;\n<p>toor@door:/etc$ <span style=\"color:#FF0000\">sudo mv my.cnf mysql</span><br />&#13;\ntoor@door:/etc$ cd mysql<br />&#13;\ntoor@door:/etc/mysql$ ls<br />&#13;\nconf.d  my.cnf<br />&#13;\ntoor@door:/etc/mysql$ gedit my.cnf <br />&#13;\ntoor@door:/etc/mysql$ ls<br />&#13;\nconf.d  my.cnf<br /><span style=\"color:#009900\">toor@door:/etc/mysql$ sudo /etc/init.d/mysql.server start<br />&#13;\nStarting MySQL<br />&#13;\n... * <br />&#13;\ntoor@door:/etc/mysql$ sudo /etc/init.d/mysql.server status<br />&#13;\n * MySQL running (9965)</span></p>&#13;\n<p><br /><br /><span style=\"background-color:rgb(204,0,0)\">要注意的是，mysql的配置文件有一个加载顺序，加载顺序参考：<a target=\"_blank\" href=\"http://www.linuxidc.com/Linux/2012-02/53855.htm\"><span style=\"color:#3333FF\"><u><span style=\"background-color:rgb(255,255,255)\">http://www.linuxidc.com/Linux/2012-02/53855.htm</span></u></span></a></span></p>&#13;\n<p><br /><span style=\"background-color:rgb(204,0,0)\"></span></p>&#13;\n<p><span style=\"background-color:rgb(204,0,0)\">会先加载/etc/mysql/my.cnf，如果安装了某些软件，在/etc/mysql目录下创建了my.cnf，然而这个文件是新生成的默认文件，却不是我们的配置文件，启动的过程加载就不成功了！所以安装了某些包后出现启动不成功！当这些包或者程序卸载后如果my.cnf也没有删除掉的话，仍然启动失败！<span style=\"background-color:rgb(255,102,102)\">。</span></span></p>&#13;\n<p><br /></p>&#13;\n<p>以上说的是mysql5.54版本！！ 仅供参考！！！<br /></p>&#13;\n<p><br /></p>&#13;\n   &#13;\n</div>','mysql的错误：The server quit without updating PID file  /usr/local/mysql/data/door.pid).','','publish','open','open','','mysql%e7%9a%84%e9%94%99%e8%af%af%ef%bc%9atheserverquitwithoutupdatingpidfile%2fusr%2flocal%2fmysql%2fdata%2fdoor-pid%29','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/07/11/mysql%e7%9a%84%e9%94%99%e8%af%af%ef%bc%9atheserverquitwithoutupdatingpidfile%2fusr%2flocal%2fmysql%2fdata%2fdoor-pid%29/',0,'post','',0),(27,1,'2015-06-23 17:30:00','2015-06-23 17:30:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>今天学习了下man，有关详细资料参考：<a target=\"_blank\" href=\"http://www.cnblogs.com/hnrainll/archive/2011/09/06/2168604.html\">http://www.cnblogs.com/hnrainll/archive/2011/09/06/2168604.html</a><br /></p>&#13;\n<p><br /></p>&#13;\n<p>toor@door:/usr/share/doc/man-db/examples$ man ls</p>&#13;\n<p><span style=\"color:#FF0000\">man: 无法解析 /usr/share/man/zh_CN/man1/ls.1.gz: 没有那个文件或目录</span></p>&#13;\n<p><br /></p>&#13;\n<p>版本</p>&#13;\n<p>toor@door:~$ man --version<br /><span style=\"color:#FF0000\">man 2.5.7</span><br /><br /><br /></p>&#13;\n<p>原因：因为新的man支持环境变量了。查看帮助：</p>&#13;\n<p><br />&#13;\nNAME<br />&#13;\n       man - 格式化并显示在线帮助手册页<br />&#13;\n       manpath - 定义用户查找man手册页的路径<br /><br />&#13;\n     ...此处省略n字...<br /><br /><u>     <span style=\"color:#FF0000\">  LANG </span>  如果   LANG   有定义，它的值将指定man在查找文档时首先查找的子目录。因此，命令“LAN   G=dk  man  1<br />&#13;\n              foo”会使man在查找man页时首先查找../dk/man1/foo.1，如果在其中没有找到相<br />&#13;\n              关文档，则查找../man/foo.1，此目录是由查找路径指定的。<br /><br />&#13;\n       NLAPATH，<br />&#13;\n              环境变量   NLAPATH   和  <span style=\"color:#FF0000\">LC_MESSAGES </span> （或当后一个不存在时使用  LANG  ）充当了定位文档目录的<br />&#13;\n              角色。（但英文信息是编译进命令的，所以针对英文而言，就没有目录存在）。注意，象col    (1)这样被man调用的程序也使用象<br />&#13;\n              LC_CTYPE 这样的变量。<br /><br />&#13;\n       PATH   变量 PATH 是在解释查找man手册页路径时使用的。</u><br /></p>&#13;\n<p><br /></p>&#13;\n<p>shell中输入：locale 查看本地locale</p>&#13;\n<p>toor@door:~$ locale<br /><span style=\"color:#FF0000\">LANG=zh_CN.UTF-8</span><br />&#13;\nLANGUAGE=zh_CN:en<br />&#13;\nLC_CTYPE=\"zh_CN.UTF-8\"<br />&#13;\nLC_NUMERIC=\"zh_CN.UTF-8\"<br />&#13;\nLC_TIME=\"zh_CN.UTF-8\"<br />&#13;\nLC_COLLATE=\"zh_CN.UTF-8\"<br />&#13;\nLC_MONETARY=\"zh_CN.UTF-8\"<br /><span style=\"color:#FF0000\">LC_MESSAGES=\"zh_CN.UTF-8\"</span><br />&#13;\nLC_PAPER=\"zh_CN.UTF-8\"<br />&#13;\nLC_NAME=\"zh_CN.UTF-8\"<br />&#13;\nLC_ADDRESS=\"zh_CN.UTF-8\"<br />&#13;\nLC_TELEPHONE=\"zh_CN.UTF-8\"<br />&#13;\nLC_MEASUREMENT=\"zh_CN.UTF-8\"<br />&#13;\nLC_IDENTIFICATION=\"zh_CN.UTF-8\"<br />&#13;\nLC_ALL=<br /><br />&#13;\n所以如果你的系统没有安装manpages-zh中文手册的时候会出现<span style=\"color:#FF0000\">man: 无法解析 /usr/share/man/zh_CN/man1/ls.1.gz: 没有那个文件或目录</span>的情况（即使是你在/etc/manpath.config中没有设置中文搜索路径，也会导致这个错误出现。<br /></p>&#13;\n   &#13;\n</div>','关于新的man版本出现“无法解析 /usr/share/man/zh_CN/man1/ls.1.gz: 没有那个文件或目录“','','publish','open','open','','%e5%85%b3%e4%ba%8e%e6%96%b0%e7%9a%84man%e7%89%88%e6%9c%ac%e5%87%ba%e7%8e%b0%e6%97%a0%e6%b3%95%e8%a7%a3%e6%9e%90%2fusr%2fshare%2fman%2fzh_cn%2fman1%2fls-1-gz%3a%e6%b2%a1%e6%9c%89%e9%82%a3%e4','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/06/23/%e5%85%b3%e4%ba%8e%e6%96%b0%e7%9a%84man%e7%89%88%e6%9c%ac%e5%87%ba%e7%8e%b0%e6%97%a0%e6%b3%95%e8%a7%a3%e6%9e%90%2fusr%2fshare%2fman%2fzh_cn%2fman1%2fls-1-gz%3a%e6%b2%a1%e6%9c%89%e9%82%a3%e4/',0,'post','',0),(29,1,'2015-04-08 16:39:00','2015-04-08 16:39:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>  使用过程中参考：http://www.cnblogs.com/lihuiyy/archive/2012/03/23/2411601.html</p>&#13;\n<p><br /></p>&#13;\n<p>个人使用：</p>&#13;\n<p>1、引用页面<br /></p>&#13;\n<p>&lt;s:action name=\"getAllNewsSort_show\"   namespace=\"/\" executeResult=\"true\"  flush=\"true\"/&gt;</p>&#13;\n<p><br /></p>&#13;\n<p><br /></p>&#13;\n<p>比引用的博客里面多了个参数！！应该是版本有点区别吧！</p>&#13;\n<p><br /></p>&#13;\n<p>2、不引用页面，请求action返回到request中。获取准备的数据。<br /></p>&#13;\n<p>在当前</p>&#13;\n<p><br /></p>&#13;\n<p>                &lt;s:action name=\"news_getRecentNews\" namespace=\"/\" executeResult=\"false\" var=\"temp\" flush=\"true\" /&gt;<br />&#13;\n                &lt;s:property value=\"#request.news_list\"/&gt;  news_list是放在request中的。</p>&#13;\n<p><br /></p>&#13;\n<p></p>&#13;\n<pre id=\"best-content-1461646921\" class=\"best-text mb-10\">&lt;s:action var=\"itemView\" name=\"itemView\" namespeac=\"/item\" /&gt;\n&lt;s:property value=\"#itemView.items\" /&gt; 这里的var就代表着那个action。</pre>&#13;\n<br /><p></p>&#13;\n   &#13;\n</div>','使用struts2标签<s:action无法显示引用页面问题','','publish','open','open','','%e4%bd%bf%e7%94%a8struts2%e6%a0%87%e7%ad%be%3cs%3aaction%e6%97%a0%e6%b3%95%e6%98%be%e7%a4%ba%e5%bc%95%e7%94%a8%e9%a1%b5%e9%9d%a2%e9%97%ae%e9%a2%98','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2015/04/08/%e4%bd%bf%e7%94%a8struts2%e6%a0%87%e7%ad%be%3cs%3aaction%e6%97%a0%e6%b3%95%e6%98%be%e7%a4%ba%e5%bc%95%e7%94%a8%e9%a1%b5%e9%9d%a2%e9%97%ae%e9%a2%98/',0,'post','',0),(31,1,'2014-12-20 01:23:00','2014-12-20 01:23:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n问题：<br />&#13;\n    使用struts2的validateXXX()进行验证，出错后自动返回之前的画面，但是Form中的数据全部丢失了，如何才能保存出错前的Form是要解决的问题。<br /><br />&#13;\n调查：<br />&#13;\n    调查后发现如果把Action的scope设置成session就应该可以在session范围内保存Form数据，但是struts2不支持直接设定Action的scope属性，没关系，有办法，因为把bean的注入交给了spring容器，spring自然可以管理它自己的bean，只需要在spring的配置文件中定义Action的bean的时候把scope设置为session就可以了。<br />&#13;\n    如果在spring中定义bean时指定scope为session，那么请小心使用struts2的Action中的validateXXX()方法，因为校验出错的状态会一直保存直到session结束（当然这是因为struts2的默认拦截器在作怪）。<br /><br />&#13;\n解决方案：<br />&#13;\nSTEP 1：<br />&#13;\n    定义bean的作用域为session (注1)<br />&#13;\n    例：  &lt;bean id=\"LoginAction\" class=\"testLogin.action\" scope=\"session\"&gt;<br />&#13;\n                &lt;property name....../&gt;<br />&#13;\n          &lt;/bean&gt;<br />&#13;\nSTEP 2.<br />&#13;\n    因为校验的错误状态ActionError会在session范围内保存，导致每次的Action请求会直接跳转到input视图。以下准备了两种解决办法<br />&#13;\n    ①重写默认的负责校验的拦截器。<br />&#13;\n    ②放弃使用validateXXX()这个方法，在Action中进行校验，使用ActionMessage代替ActionError。<br /><br />&#13;\n注1：同时不要忘记在web.xml中追加一个监听。<br />&#13;\n    &lt;listener&gt;<br />&#13;\n        &lt;listener-class&gt;<br />&#13;\n                org.springframework.web.context.request.RequestContexgListener<br />&#13;\n        &lt;/listener-class&gt;<br />&#13;\n    &lt;/listener&gt;<br /><br /><p>ok，到此为止问题已经解决，需要说明的是，解决问题的办法并不只是这一种，根据具体情况可以采用不同的方法，例如通过hidden项目传递Form就是一种不错的方法。</p>&#13;\n<p><br /></p>&#13;\n<p>原文链接：<a target=\"_blank\" href=\"http://tjmljw.iteye.com/blog/1446639\">http://tjmljw.iteye.com/blog/1446639</a><br /></p>&#13;\n   &#13;\n</div>','关于Action中ValidateXXX方法校验一次失败后导致以后一直返回input视图的情况','','publish','open','open','','%e5%85%b3%e4%ba%8eaction%e4%b8%advalidatexxx%e6%96%b9%e6%b3%95%e6%a0%a1%e9%aa%8c%e4%b8%80%e6%ac%a1%e5%a4%b1%e8%b4%a5%e5%90%8e%5c%e5%af%bc%e8%87%b4%e4%bb%a5%e5%90%8e%e4%b8%80%e7%9b%b4%e8%bf%94%e5%9b%9e','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/12/20/%e5%85%b3%e4%ba%8eaction%e4%b8%advalidatexxx%e6%96%b9%e6%b3%95%e6%a0%a1%e9%aa%8c%e4%b8%80%e6%ac%a1%e5%a4%b1%e8%b4%a5%e5%90%8e%5c%e5%af%bc%e8%87%b4%e4%bb%a5%e5%90%8e%e4%b8%80%e7%9b%b4%e8%bf%94%e5%9b%9e/',0,'post','',0),(33,1,'2014-12-19 00:30:00','2014-12-19 00:30:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>以下是错误日志信息：</p>&#13;\n<p>严重: The web application [/news] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.<br />&#13;\n2014-12-19 0:27:47 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br />&#13;\n严重: The web application [/news] appears to have started a thread named [C3P0PooledConnectionPoolManager[identityToken-&gt;1pyjusp96q571f188m8|18782a7]-AdminTaskTimer]&#13;\n<span style=\"color:#FF0000\">but has failed to stop it. This is very likely to create a memory leak.</span><br />&#13;\n2014-12-19 0:27:47 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br />&#13;\n严重: The web application [/news] appears to have started a thread named [C3P0PooledConnectionPoolManager[identityToken-&gt;1pyjusp96q571f188m8|18782a7]-<span style=\"color:#FF0000\">HelperThread-#0] but has failed to stop it. This is very likely to create a memory&#13;\n leak.</span><br />&#13;\n2014-12-19 0:27:47 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br />&#13;\n严重: The web application [/news] appears to have started a thread named [C3P0PooledConnectionPoolManager[identityToken-&gt;1pyjusp96q571f188m8|18782a7]-<span style=\"color:#FF0000\">HelperThread-#1] but has failed to stop it. This is very likely to create a memory&#13;\n leak.</span><br />&#13;\n2014-12-19 0:27:47 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads<br />&#13;\n严重: The web application [/news] appears to have started a thread named [C3P0PooledConnectionPoolManager[identityToken-&gt;1pyjusp96q571f188m8|18782a7]-<span style=\"color:#FF0000\">HelperThread-#2] but has failed to stop it. This is very likely to create a memory&#13;\n leak.</span></p>&#13;\n<p><br /></p>&#13;\n<p>堆栈信息：</p>&#13;\n<p>Exception in thread \"C3P0PooledConnectionPoolManager[identityToken-&gt;1pyjusp96q571f188m8|18782a7]-AdminTaskTimer\" java.lang.NullPointerException<br />&#13;\n    at com.mchange.v2.log.log4j.Log4jMLog$Log4jMLogger.isLoggable(Log4jMLog.java:293)<br />&#13;\n    at com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector.run(ThreadPoolAsynchronousRunner.java:729)<br />&#13;\n    at java.util.TimerThread.mainLoop(Timer.java:512)<br />&#13;\n    at java.util.TimerThread.run(Timer.java:462)</p>&#13;\n<p><br /></p>&#13;\n<p><br /></p>&#13;\n<p>我的情况是在配置数据源时未配置销毁dataSource对象时执行close方法关闭连接</p>&#13;\n<p></p><pre name=\"code\" class=\"html\">	&lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" &gt;\n		&lt;property name=\"driverClass\" value=\"${driverClass}\"&gt;&lt;/property&gt;\n		&lt;property name=\"jdbcUrl\" value=\"${jdbcUrl}\"&gt;&lt;/property&gt;\n		&lt;property name=\"user\" value=\"${user}\"&gt;&lt;/property&gt;\n		&lt;property name=\"password\" value=\"${password}\"&gt;&lt;/property&gt;\n\n		&lt;property name=\"initialPoolSize\" value=\"1\"&gt;&lt;/property&gt;\n		&lt;property name=\"minPoolSize\" value=\"1\"&gt;&lt;/property&gt;\n		&lt;property name=\"maxPoolSize\" value=\"20\"&gt;&lt;/property&gt;\n		&lt;property name=\"maxIdleTime\" value=\"60\"&gt;&lt;/property&gt;\n	&lt;/bean&gt;</pre><br /><pre name=\"code\" class=\"html\">&lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" &gt; 在这里面加入destroy-method=\"close\"</pre><br /></div>','but has failed to stop it. This is very likely to create a memory leak(c3p0在Spring管理中，连接未关闭导致的内存溢出)','','publish','open','open','','buthasfailedtostopit-thisisverylikelytocreateamemoryleak%28c3p0%e5%9c%a8spring%e7%ae%a1%e7%90%86%e4%b8%ad%ef%bc%8c%e8%bf%9e%e6%8e%a5%e6%9c%aa%e5%85%b3%e9%97%ad%e5%af%bc%e8%87%b4%e7%9a%84','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/12/19/buthasfailedtostopit-thisisverylikelytocreateamemoryleak%28c3p0%e5%9c%a8spring%e7%ae%a1%e7%90%86%e4%b8%ad%ef%bc%8c%e8%bf%9e%e6%8e%a5%e6%9c%aa%e5%85%b3%e9%97%ad%e5%af%bc%e8%87%b4%e7%9a%84/',0,'post','',0),(35,1,'2014-12-02 23:04:00','2014-12-02 23:04:00','[TOC]\n### mybatis使用入门\n1.编写全局配置文件configuration.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n    PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <!--给实体类起一个别名 user -->\n        <typeAlias type=\"cn.sky.bookshop.beans.User\" alias=\"User\" />\n    </typeAliases>\n    <!--数据源配置  这块用 mysql数据库 -->\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"jdbc\" />\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ibatis\" />\n                <property name=\"username\" value=\"root\" />\n                <property name=\"password\" value=\"215890\" />\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <!--userMapper.xml装载进来  同等于把“dao”的实现装载进来 -->\n        <mapper resource=\"User.xml\" />\n        <mapper resource=\"UserMapper.xml\" />\n    </mappers>\n</configuration>\n```\n2.这里编写一个MyBatis工具类\n\n```java\npackage cn.sky.bookshop.utils;\nimport java.io.IOException;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\npublic final class MyBatisUtil {\n\n    private static SqlSessionFactory sessionFactory;\n    private static String resource = \"configuration.xml\";\n\n    static {\n    try {\n        sessionFactory = new SqlSessionFactoryBuilder()//\n                .build(Resources//\n            .getResourceAsReader(resource));\n        // sessionFactory.getConfiguration().addMapper(UserDao.class);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    }\n\n    public static SqlSession getSqlSession() {\n    return sessionFactory.openSession();\n    }\n}\n```\n然后接可以先建立一个测试类加载测试一番了。。\n\n3.按Javabean规范写的一个User类\n\n```java\npackage cn.sky.bookshop.beans;\n\npublic class User {\n    private int id;\n    private String userName;\n    private String password;\n    private String email;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n    @Override\n    public String toString() {\n    return \"User [email=\" + email + \", id=\" + id + \", password=\" + password\n        + \", username=\" + userName + \"]\";\n    }\n}\n```\n\n4.这里将UserDao接口命名为UserMapper接口\n\n```java\npackage cn.sky.bookshop.dao;\n\nimport cn.sky.bookshop.beans.User;\n\npublic interface UserMapper {\n\n\n    public User findUserByName(String username)throws Exception;\n\n    public void insertUser(User user)throws Exception;\n\n    public void updateUser(User user)throws Exception;\n\n    public void deleteUserById(int id)throws Exception;\n}\n```\n\n5.关键是这里的UserMapper.xml\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!-- namespace必须是定义的接口全限定名 -->\n<mapper namespace=\"cn.sky.bookshop.dao.UserMapper\">\n    <!-- 里面id是接口的方法名 parameterType是接口里方法的传入参数 -->\n    <insert id=\"insertUser\" parameterType=\"User\">\n        insert into\n        t_user(id,username,password,email)values(#{id},#{userName},#{password},#{email});\n    </insert>\n    <!-- resultType这里是接口里方法返回值类型：当方法返回集合时，这里还是设为集合元素类型 -->\n    <select id=\"findUserByName\" parameterType=\"string\" resultType=\"User\">\n        select * from t_user where username=#{userName};\n    </select>\n\n    <update id=\"updateUser\" parameterType=\"User\">\n        update t_user set\n        username=#{userName},password=#{password},email=#{email} where\n        id=#{id};\n    </update>\n\n    <delete id=\"deleteUserById\" parameterType=\"int\">\n        delete from t_user\n        where id=#{id};\n    </delete>\n</mapper>\n\n```\n\n6.注意：上面的步骤配置有些严格。。因为下面的接口动态代理对象（就是个接口的实现）是根据UserMapper接口和UserMapper.xml文件生成的! 下面是我的DAO测试类\n\n```java\nUserMapperTest\npackage cn.sky.bookshop.test;\n\nimport org.apache.ibatis.session.SqlSession;\n\nimport cn.sky.bookshop.beans.User;\nimport cn.sky.bookshop.dao.UserMapper;\nimport cn.sky.bookshop.utils.MyBatisUtil;\n\npublic class UserMapperTest {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n//      addUserMapper(); 添加\n//  findUserMapper(); 查找\n//  updateUserMapper();更新\n    deleteUserMapper();\n    }\n    //添加记录\n    public static void addUserMapper(){\n    SqlSession sqlSession = MyBatisUtil.getSqlSession();\n    //获取接口的动态代理对象\n    UserMapper um = sqlSession.getMapper(UserMapper.class);\n    User user = new User();\n    user.setUserName(\"大侠\");\n    user.setPassword(\"daxia\");\n    user.setEmail(\"fdasf@qq.com2\");\n    try {\n        um.insertUser(user);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    sqlSession.commit();\n    sqlSession.close();\n\n    }\n    //查找记录\n    public static void findUserMapper() {\n    SqlSession sqlSession = MyBatisUtil.getSqlSession();\n    UserMapper um = sqlSession.getMapper(UserMapper.class);\n    User user = null;\n    try {\n        user = um.findUserByName(\"大侠\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(user);\n    sqlSession.close();\n    }\n    //跟新纪录\n    public static void updateUserMapper(){\n    SqlSession sqlSession = MyBatisUtil.getSqlSession();\n    UserMapper um = sqlSession.getMapper(UserMapper.class);\n    User user = new User();\n    user.setId(4);\n    user.setUserName(\"小虾\");\n    user.setPassword(\"xiaoxia\");\n    user.setEmail(\"xiaoxiao@qq.com2\");\n    try {\n        um.updateUser(user);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    sqlSession.commit();\n    sqlSession.close();\n    }\n    //删除记录\n    public static void deleteUserMapper(){\n    SqlSession sqlSession = MyBatisUtil.getSqlSession();\n    UserMapper um = sqlSession.getMapper(UserMapper.class);\n    try {\n        um.deleteUserById(4);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    sqlSession.commit();\n    sqlSession.close();\n    }\n}\n```','mybatis使用入门','','publish','open','open','','%e4%b8%aa%e4%ba%ba%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-mybatis%e5%ae%98%e6%96%b9%e6%8e%a8%e8%8d%90dao%e5%bc%80%e5%8f%91%e6%96%b9%e6%a1%88','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/12/02/%e4%b8%aa%e4%ba%ba%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-mybatis%e5%ae%98%e6%96%b9%e6%8e%a8%e8%8d%90dao%e5%bc%80%e5%8f%91%e6%96%b9%e6%a1%88/',0,'post','',0),(89,1,'2017-01-02 07:16:23','2017-01-02 07:16:23','### mysql删除表方式及区别\n\n> 本文记录一下这2种操作模式的区别，目标对象是表wp_comments，里面的所有留言均是垃圾留言，均可删除。然后便有了以下2种方式（进入mysql操作界面后）：\n\n```sql\ntruncate table wp_comments;\ndelete * from wp_comments;\n```\n> 其中truncate操作中的table可以省略，delete操作中的*可以省略。这两者都是将wp_comments表中数据清空，不过也是有区别的，如下：\n\n- truncate是整体删除（速度较快）， delete是逐条删除（速度较慢）。\n- truncate不写服务器log，delete写服务器log，也就是truncate效率比delete高的原因。\n- truncate不激活trigger(触发器)，但是会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。而delete删除以后，Identity依旧是接着被删除的最近的那一条记录ID加1后进行记录。\n> 如果只需删除表中的部分记录，只能使用DELETE语句配合where条件。 DELETE FROM wp_comments WHERE……','mysql删除表方式及区别','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(37,1,'2014-12-02 11:06:00','2014-12-02 11:06:00','<div id=\"article_content\" class=\"article_content\">&#13;\n&#13;\n<p>1、导入Jar包</p>&#13;\n<p><img src=\"http://img.blog.csdn.net/20141202110516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmF2YV93YXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" height=\"177\" width=\"202\" alt=\"\" /></p>&#13;\n<p>2、设置全局配置文件</p>&#13;\n<p></p><pre name=\"code\" class=\"html\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;     \n&lt;!DOCTYPE configuration     \n    PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"     \n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;  \n&lt;configuration&gt;  \n    &lt;typeAliases&gt;  \n        &lt;!--给实体类起一个别名 user --&gt;  \n        &lt;typeAlias type=\"cn.sky.bookshop.beans.User\" alias=\"User\" /&gt;  \n    &lt;/typeAliases&gt;  \n    &lt;!--数据源配置  这块用 mysql数据库 --&gt;  \n    &lt;environments default=\"development\"&gt;  \n        &lt;environment id=\"development\"&gt;  \n            &lt;transactionManager type=\"jdbc\" /&gt;  \n            &lt;dataSource type=\"POOLED\"&gt;  \n                &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\" /&gt;  \n                &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/ibatis\" /&gt;  \n                &lt;property name=\"username\" value=\"root\" /&gt;  \n                &lt;property name=\"password\" value=\"215890\" /&gt;  \n            &lt;/dataSource&gt;  \n        &lt;/environment&gt;  \n    &lt;/environments&gt;  \n    &lt;mappers&gt;  \n        &lt;!--userMapper.xml装载进来  同等于把“dao”的实现装载进来 --&gt; \n        &lt;mapper resource=\"User.xml\" /&gt;   \n        &lt;mapper resource=\"UserMapper.xml\" /&gt;  \n    &lt;/mappers&gt;  \n&lt;/configuration&gt;  </pre><br />&#13;\n3、编写Javabean&#13;\n<p></p><pre name=\"code\" class=\"java\">package cn.sky.bookshop.beans;\n\npublic class User {\n    private int id;\n    private String userName;\n    private String password;\n    private String email;\n    \n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n    @Override\n    public String toString() {\n	return \"User [email=\" + email + \", id=\" + id + \", password=\" + password\n		+ \", username=\" + userName + \"]\";\n    }\n}</pre><br />&#13;\n4、配置映射文件、&#13;\n<p></p><pre name=\"code\" class=\"html\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; \n &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n\n\n&lt;mapper namespace=\"test\"&gt;\n	&lt;!-- 添加记录   parameterType传入参数类型--&gt;\n	&lt;insert id=\"insertUser\" parameterType=\"User\"&gt;\n		insert into\n		t_user(id,username,password,email)values(#{id},#{userName},#{password},#{email});\n	&lt;/insert&gt;\n	&lt;!-- resultType返回参数类型 --&gt;\n	&lt;select id=\"findUserByName\" parameterType=\"string\" resultType=\"User\"&gt;\n		select * from t_user where username=#{userName};\n	&lt;/select&gt;\n\n	&lt;delete id=\"deleteUserById\" parameterType=\"int\"&gt;\n		delete from t_user\n		where id=#{id};\n	&lt;/delete&gt;\n\n	&lt;update id=\"updateUser\" parameterType=\"User\"&gt;\n		update t_user set\n		username=#{userName},password=#{password},email=#{email} where\n		id=#{id};\n	&lt;/update&gt;\n\n&lt;/mapper&gt;</pre><br />&#13;\n5、dao接口&#13;\n<p></p><pre name=\"code\" class=\"java\">package cn.sky.bookshop.dao;\n\nimport cn.sky.bookshop.beans.User;\n\npublic interface UserDao {\n    \n    public User findUserByName(String username);\n    \n    public void insertUser(User user);\n    \n    public void deleteUserById(int id);\n    \n    public void updateUser(User user);\n}\n</pre><br />&#13;\n6、dao实现&#13;\n<p></p><pre name=\"code\" class=\"java\">package cn.sky.bookshop.dao;\n\nimport org.apache.ibatis.session.SqlSession;\n\nimport cn.sky.bookshop.beans.User;\nimport cn.sky.bookshop.utils.MyBatisUtil;\n\npublic class UserDaoImpl implements UserDao {\n    //查找\n    public User findUserByName(String username) {\n        SqlSession sqlSession = MyBatisUtil.getSqlSession();  \n       	User user = sqlSession.selectOne(\"test.findUserByName\",username);\n        sqlSession.close();\n	return user;\n    }\n    //插入\n    public void insertUser(User user) {\n        SqlSession sqlSession = MyBatisUtil.getSqlSession();  \n       	sqlSession.insert(\"test.insertUser\", user);\n        sqlSession.commit();\n        sqlSession.close();\n    }\n    //删除\n    public void deleteUserById(int id){\n        SqlSession sqlSession = MyBatisUtil.getSqlSession();  \n       	sqlSession.delete(\"test.deleteUserById\", id);\n        sqlSession.commit();\n        sqlSession.close();\n    }\n    //更新\n    public void updateUser(User user){\n        SqlSession sqlSession = MyBatisUtil.getSqlSession();  \n       	sqlSession.update(\"test.updateUser\", user);\n        sqlSession.commit();\n        sqlSession.close();\n    }\n}\n</pre><br />&#13;\n7、前面还少了个工具类....MyBatisUtil&#13;\n<p></p><pre name=\"code\" class=\"java\">package cn.sky.bookshop.utils;\n\nimport java.io.IOException;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n\npublic final class MyBatisUtil {\n    \n    private static SqlSessionFactory sessionFactory;\n    private static String resource = \"configuration.xml\";  \n    \n    static{\n        try {  \n            sessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(resource));\n//            sessionFactory.getConfiguration().addMapper(UserDao.class);\n        } catch (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }\n  \n    public static SqlSession getSqlSession(){\n	return sessionFactory.openSession();\n    }\n}\n</pre>8、Dao测试类&#13;\n<p></p><pre name=\"code\" class=\"java\">package cn.sky.bookshop.test;\n\nimport cn.sky.bookshop.beans.User;\nimport cn.sky.bookshop.dao.UserDao;\nimport cn.sky.bookshop.dao.UserDaoImpl;\n\npublic class UserDaoImplTest {\n\n    public static UserDao userDao = new UserDaoImpl();\n    \n    public static void main(String[] args) {\n//	addUser();\n//	findUser();\n//	deleteUser();\n	updateUser();\n    }\n    \n    public static void addUser(){\n	User user = new User();\n	user.setUserName(\"李四\");\n	user.setPassword(\"zhangsanw2\");\n	user.setEmail(\"zserw@qq.com2\");\n	userDao.insertUser(user);\n    }\n    \n    public static void findUser(){\n	User user = userDao.findUserByName(\"李四\");\n	System.out.println(user);\n    }\n    \n    public static void deleteUser(){\n	userDao.deleteUserById(3);\n    }\n    \n    public static void updateUser(){\n	User user = new User();\n	user.setId(2);\n	user.setUserName(\"小吴\");\n	user.setPassword(\"xiaowu\");\n	user.setEmail(\"abc@qq.com2\");\n	userDao.updateUser(user);\n    }\n\n}\n</pre><br /><br /></div>','个人学习笔记--MyBatis-的搭建及第一个程序','','publish','open','open','','%e4%b8%aa%e4%ba%ba%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-mybatis-%e7%9a%84%e6%90%ad%e5%bb%ba%e5%8f%8a%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%a8%8b%e5%ba%8f','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/12/02/%e4%b8%aa%e4%ba%ba%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-mybatis-%e7%9a%84%e6%90%ad%e5%bb%ba%e5%8f%8a%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%a8%8b%e5%ba%8f/',0,'post','',0),(39,1,'2014-11-26 17:09:00','2014-11-26 17:09:00','[TOC]\n\n## hibernate开发包下载\nhttp://sourceforge.net/projects/hibernate/files/\n\n## 添加jar包\n将hibernate-release-4.3.7.Final\\lib\\required目录下的jar导入\n\n## 在src目录下创建Student.java\n(按Javabean规范来,这些属性跟数据库中的字段对应起来)\n```java\npackage cn.sky.bookshop.bean;\n\npublic class Student {\n    private int id;\n    private String uname;\n    private String upass;\n    \n    \n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getUname() {\n        return uname;\n    }\n    public void setUname(String uname) {\n        this.uname = uname;\n    }\n    public String getUpass() {\n        return upass;\n    }\n    public void setUpass(String upass) {\n        this.upass = upass;\n    }\n    @Override\n    public String toString() {\n	return \"Student [id=\" + id + \", uname=\" + uname + \", upass=\" + upass\n		+ \"]\";\n    }\n}\n```\n\n## 建立一个对象关系映射文件\n\n建立一个对象关系映射文件Student.hbm.xml\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE hibernate-mapping PUBLIC\n        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n\n<hibernate-mapping package=\"cn.sky.bookshop.bean\">\n	<class name=\"Student\" table=\"student\">\n		<id name=\"id\" column=\"id\">\n			<generator class=\"native\"></generator>\n		</id>\n		<property name=\"uname\" column=\"uname\"></property>\n		<property name=\"upass\" column=\"upass\"></property>\n	</class>\n</hibernate-mapping>\n```\n## 建立一个hibernate.cfg.xml配置文件\n\n```xml\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<!DOCTYPE hibernate-configuration PUBLIC\n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n\n<hibernate-configuration>\n\n    <session-factory>\n\n        <!-- 数据库连接设置 -->\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\n        <property name=\"connection.url\">jdbc:mysql://localhost:3306/hibernate</property>\n        <property name=\"connection.username\">root</property>\n        <property name=\"connection.password\">215890</property>\n\n        <!-- JDBC connection pool (use the built-in) -->\n        <property name=\"connection.pool_size\">1</property>\n\n        <!-- SQL方言 -->\n        <property name=\"dialect\">org.hibernate.dialect.MySQLDialect</property>\n\n        <!-- Enable Hibernate\'s automatic session context management -->\n        <property name=\"current_session_context_class\">thread</property>\n\n\n        <!-- 是否显示执行的SQL语句 -->\n        <property name=\"show_sql\">true</property>\n        <!-- 对象关系映射文件 -->\n        <mapping resource=\"cn/sky/bookshop/bean/Student.hbm.xml\"/>\n\n    </session-factory>\n\n</hibernate-configuration>\n```\n\n## 建立一个HibernateUtil.java类\n主要是获取session时使用\n\n```java\npackage cn.sky.bookshop.util;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\nimport org.hibernate.cfg.Configuration;\n\npublic final class HibernateUtil {\n    private static SessionFactory factory;\n    private static Configuration conf;\n    static {\n	conf = new Configuration().configure();\n	factory = conf.buildSessionFactory();\n    }\n\n    public static Session getSession() {\n	return factory.openSession();\n    }\n\n    public static void closeSession(Session session) {\n	if (session != null && session.isOpen()) {\n	    session.close();\n	}\n    }\n}\n```\n注意：这里色SessionFactory对象只有一个，这是按饿汉式单例设计的。\n\n## 设计DAO\n然后可以设计DAO了，下面是我的DAO测试类\n\n```java\npackage cn.sky.bookshop.test;\n\n\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\nimport org.hibernate.criterion.Restrictions;\n\nimport cn.sky.bookshop.bean.Student;\nimport cn.sky.bookshop.util.HibernateUtil;\n\npublic class TestStudent {\n\n    public static void main(String[] args) {\n		// TODO Auto-generated method stub\n		Student stu = new Student();\n		stu.setUname(\"李四2\");\n		stu.setUpass(\"123456\");\n	//	addStudent(stu); //添加数据\n	//	updateStudent(stu, 1); //修改数据\n	//	Student stu2 = selectStudentById(1); 查询数据\n	//	System.out.println(stu2.toString());\n	//	deleteStudentById(1);\n\n		List list = selectStudentIf();\n		for (Object tem : list) {\n			Student stu3 = (Student)tem;\n			System.out.println(stu3.toString());\n		}\n    }\n    \n    //添加学生记录\n    public static void addStudent(Student stu){\n		Session session1 = HibernateUtil.getSession();\n		session1.beginTransaction();//开启事物(即创建了一个事物对象\n		session1.save(stu);	    //保存stu对象\n		session1.getTransaction().commit(); //提交事务\n		HibernateUtil.closeSession(session1);\n    }\n    //更新学生记录\n    public static void updateStudent(Student stu,int id){\n		Session session1 = HibernateUtil.getSession();\n		Transaction tc = session1.beginTransaction(); //创建事物对象\n		stu.setId(id);\n		session1.update(stu);			//更新对象\n		tc.commit();				//提交事务\n		HibernateUtil.closeSession(session1);\n    }\n    //查询学生记录\n    public static Student selectStudentById(int id){\n		Session session1 = HibernateUtil.getSession();\n		Transaction tc = session1.beginTransaction(); //创建事物对象\n		Query query = session1.createQuery(\"from Student s where s.id=?\");\n		query.setInteger(0, id);  //这里下标从0开始替换?\n		Student stu = (Student)query.uniqueResult();\n		tc.commit();	\n		HibernateUtil.closeSession(session1);\n		return stu;\n    }\n    //删除学生记录\n    public static void deleteStudentById(int id){\n		Session session1 = HibernateUtil.getSession();\n		Transaction tc = session1.beginTransaction(); //创建事物对象\n		Student stu = new Student();\n		stu.setId(id);\n		session1.delete(stu);\n		tc.commit();	\n		HibernateUtil.closeSession(session1);\n    }\n    //条件查询\n    public static List<Student> selectStudentIf(){\n		Session s1 = HibernateUtil.getSession();\n		Transaction tc = s1.beginTransaction();\n		Criteria criteria = s1.createCriteria(Student.class); //创建条件查询对象\n		criteria.add(Restrictions.gt(\"id\",1)); //添加查询条件\n		criteria.add(Restrictions.lt(\"id\",5));\n		criteria.add(Restrictions.eq(\"id\",2));\n		List<Student> list = criteria.list();\n		tc.commit();\n		s1.close(); \n		return list;\n    }\n\n}\n```','Hibernate学习笔记--环境搭建及运行','','publish','open','open','','hibernate%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e5%8f%8a%e8%bf%90%e8%a1%8c','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/11/26/hibernate%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e5%8f%8a%e8%bf%90%e8%a1%8c/',0,'post','',0),(41,1,'2014-11-25 20:48:00','2014-11-25 20:48:00','[TOC]\n\n## 编写一个类实现com.opensymphony.xwork2.interceptor.Interceptor接口\n\nPermissionInterceptor.java\n\n```java\npackage cn.sky.bookshop.interceptor;\n\nimport org.apache.struts2.ServletActionContext;\nimport cn.sky.bookshop.utils.DateUtil;\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\n\npublic class PermissionInterceptor implements Interceptor {\n\n    private static final long serialVersionUID = -1908127830415801520L;\n\n    private String includeUrl;\n\n    public void destroy() {\n    }\n\n    public void init() {\n    }\n\n    public String intercept(ActionInvocation invocation) throws Exception {\n	//会话session中取出uname\n	Object obj = ServletActionContext.getRequest().getSession().getAttribute(\"uname\");\n	//获取访问路径\n	String path = ServletActionContext.getRequest().getServletPath();\n	//如果存在uname或者访问路径包含在includeUrl中\n	if (obj != null || includeUrl.contains(path)) {\n	    return invocation.invoke(); //继续调用下一个拦截器，如果没有则执行Action\n	}\n	ServletActionContext.getRequest().setAttribute(\"errorInfo\",\"No permission to operate the page\");//保存错误信息\n	return \"disallow\";//返回视图\n    }\n\n    public String getIncludeUrl() {\n	return includeUrl;\n    }\n\n    public void setIncludeUrl(String includeUrl) {\n	this.includeUrl = includeUrl;\n    }\n}\n```\n\n## 配置struts.xml 文件\n1	定义一个自己的默认包\n```xml\n<package name=\"my-struts-default\" namespace=\"/\" extends=\"struts-default\">\n\n		<interceptors>\n			<!-- 这里是定义一个拦截器 -->\n			<interceptor name=\"permission\" class=\"cn.sky.bookshop.interceptor.PermissionInterceptor\">\n					<!-- 拦截器的初始化注入参数 -->\n					<param name=\"includeUrl\">/user/user_login.action,/getcode</param>\n			</interceptor>\n			<!-- 这里定义一个拦截器栈 -->\n			<interceptor-stack name=\"myDefalutStack\">\n				<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n				<interceptor-ref name=\"permission\"></interceptor-ref>\n			</interceptor-stack>\n		</interceptors>\n		<!--设置默认的拦截器栈(访问Action前默认调用)-->\n	<default-interceptor-ref name=\"myDefalutStack\"></default-interceptor-ref>\n		<!-- 全局result -->\n		<global-results>\n			<result name=\"disallow\" type=\"redirect\">/login.jsp</result>\n		</global-results>\n		<action name=\"getcode\" class=\"cn.sky.bookshop.action.VerifyCodeAction\">\n		</action>\n\n	</package>\n```\n2	以后的包都继承上面my-struts-default\n\n## 注意\n\n这里只能实现对访问Action时实现拦截，对jsp的访问不可能实现拦截。(可以将自定义拦截器栈中的默认拦截器\ndefaultStack注释掉，访问jsp发现根本没执行过此拦截器。可想而知，在拦截器工作之前对jsp的页面请求已经做出响应了。)','个人笔记--struts2对Action的权限拦截','','publish','open','open','','%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0-struts2%e5%af%b9action%e7%9a%84%e6%9d%83%e9%99%90%e6%8b%a6%e6%88%aa','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/11/25/%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0-struts2%e5%af%b9action%e7%9a%84%e6%9d%83%e9%99%90%e6%8b%a6%e6%88%aa/',0,'post','',0),(43,1,'2014-11-25 18:53:00','2014-11-25 18:53:00','[TOC]\n\n## 编写一个Java类实现javax.servlet.Filter接口\n\n```java\npackage cn.edu.sxu.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class PermissionFilter implements Filter {\n    private String includeUrl;\n    public void destroy() {\n	System.out.println(\"权限拦截销毁...\");\n    }\n\n    public void doFilter(ServletRequest request, ServletResponse response,\n	    FilterChain chain) throws IOException, ServletException {\n	HttpServletRequest req = (HttpServletRequest)request;\n	HttpServletResponse resp = (HttpServletResponse)response;\n	//从会话中拿登录后session保存的uname\n	Object obj = req.getSession().getAttribute(\"uname\");\n	//获取请求路径\n	String path = req.getServletPath();\n	//如果会话中保存了uname或者访问路径在includeUrl中\n	if(null!=obj||includeUrl.contains(path))\n	{\n	    chain.doFilter(req,resp);\n	}\n	else\n	{\n	    System.out.println(\"重定向 ...\");\n	    resp.sendRedirect(req.getContextPath()+\"/login.jsp\");\n	}\n    }\n\n    public void init(FilterConfig config) throws ServletException {\n	System.out.println(\"权限拦截启用...\");\n	//从web.xml中PermissionFilter加载参数获取可访问路径\n	this.includeUrl = config.getInitParameter(\"includeUrl\");\n    }\n\n}\n```\n\n## 在web.xml中配置此过滤器\n\n```xml\n<filter>\n	<filter-name>PermissionFilter</filter-name>\n	<filter-class>cn.edu.sxu.filter.PermissionFilter</filter-class>\n	<init-param>\n		<param-name>includeUrl</param-name>  \n                <!--这里是允许通过的访问路径-->\n		<param-value>/index.jsp,/login.jsp,/register.jsp</param-value>\n	</init-param>\n</filter>\n\n<filter-mapping>\n	<filter-name>PermissionFilter</filter-name>\n	<url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n以上就可以实现权限拦截功能了\n## 与Struts2整合\n\n下面将此过滤器与struts2中StrutsPrepareAndExecuteFilter过滤器整合代码 \n```java\npackage cn.sky.bookshop.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.struts2.dispatcher.Dispatcher;\nimport org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter;\n\nimport cn.sky.bookshop.utils.DateUtil;\n\npublic class StrutsExtendsI18nFilter extends StrutsPrepareAndExecuteFilter {\n    private String includeUrl;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n	this.includeUrl = filterConfig.getInitParameter(\"includeUrl\");\n	super.init(filterConfig); // 调用父类(struts2核心过滤器的初始化方法)初始化方法初始化\n    }\n\n    @Override\n    protected void postInit(Dispatcher dispatcher, FilterConfig filterConfig) {\n	System.out.println(\"这里你可以让struts2初始化再做些什么事。。。\");\n	super.postInit(dispatcher, filterConfig); // 父类这个方法是空的,这句话是废话\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response,\n	    FilterChain chain) throws IOException, ServletException {\n	// 使用国际化封装request,重写getLocale()方法\n	HttpServletRequest myrequest = new MyHttpRequest((HttpServletRequest) request);\n	HttpServletResponse resp = (HttpServletResponse) response;\n	//获取会话session里的uname\n	Object obj = myrequest.getSession().getAttribute(\"uname\");\n	//获取访问路径\n	String path = myrequest.getServletPath();\n	//如果session中存在uname,或includeUrl中包含了访问路径path\n	if (null != obj || includeUrl.contains(path)) {\n	    // 调用父类Struts2核心过滤器的doFilter方法\n	    super.doFilter(myrequest, response, chain);\n	} else {\n	    // 重定向回登录页面\n	    resp.sendRedirect(myrequest.getContextPath() + \"/login.jsp\");\n	}\n	// super.doFilter(myrequest, response, chain);\n    }\n\n    @Override\n    public void destroy() {\n    }\n\n}\n```\n## 在web.xml中的配置\n\n```xml\n  <filter>\n  	<filter-name>struts2.3</filter-name>\n  	<filter-class>cn.sky.bookshop.filter.StrutsExtendsI18nFilter</filter-class>\n  	<init-param>\n  		<param-name>includeUrl</param-name>\n  		<param-value>/login.jsp,/register.jsp,/index.jsp,/user/user_login.action</param-value>\n  	</init-param>\n  </filter>\n  <filter-mapping>\n  	<filter-name>struts2.3</filter-name>\n  	<url-pattern>/*</url-pattern>\n  </filter-mapping>\n```','个人笔记--Servlet之过滤器实现权限拦截','','publish','open','open','','%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0-servlet%e4%b9%8b%e8%bf%87%e6%bb%a4%e5%99%a8%e5%ae%9e%e7%8e%b0%e6%9d%83%e9%99%90%e6%8b%a6%e6%88%aa','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/2014/11/25/%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0-servlet%e4%b9%8b%e8%bf%87%e6%bb%a4%e5%99%a8%e5%ae%9e%e7%8e%b0%e6%9d%83%e9%99%90%e6%8b%a6%e6%88%aa/',0,'post','',0),(49,1,'2016-10-17 20:37:50','0000-00-00 00:00:00','','首页','','draft','closed','closed','','','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/?p=49',1,'nav_menu_item','',0),(50,1,'2016-10-17 20:37:51','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2017-06-13 22:46:10','2017-06-13 14:46:10','',0,'http://115.28.81.19/?p=50',1,'nav_menu_item','',0),(85,1,'2016-12-04 02:43:41','2016-12-04 02:43:41','### nginx 403错误\n1. 权限配置不正确\n\n nginx有2个进程，一个主进程，一个工作进程ps -ef|grep nginx 如下(第三行是grep进程)\n```\nroot     10181     1  0 11:04 ?        00:00:00 nginx: master process nginx -c /var/wwwnginx/nginx/conf/nginx_temp.conf\nnginx    10182 10181  0 11:04 ?        00:00:00 nginx: worker process\nroot     16250 32426  0 11:20 pts/8    00:00:00 grep --color=auto nginx\n```\n\n* 主进程跟nginx执行的当前用户有关\n* 工作进程跟nginx.conf配置相关(默认为nginx或者nobody) 使用use nginx(角色名); 配置\n\n 工作进程角色的权限不正确是nginx出现403 forbidden最常见的原因。\n 为了保证文件能正确执行，nginx的工作进程角色既需要文件的读权限,又需要文件所有父目录的可执行权限。\n\n* 例如，当访问/usr/local/nginx/html/image.jpg时，nginx既需要image.jpg文件的可读权限，也需要/,/usr,/usr/local,/usr/local/nginx,/usr/local/nginx/html的可以执行权限。\n\n* 1 解决办法:设置所有父目录为755权限，设置文件为644权限可以避免权限不正确。\n* 2 如果必需要把目录放置在home目录，可以使用/var(root,所有用户可读可执行r-x),使用符号链接的方式','nginx403','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(86,2,'2016-12-04 03:51:08','2016-12-04 03:51:08','### linux use SSD\n\n1.firefox\n\n在地址栏中输入 about:config 后回车，然后点击右键新建一个 String ，\nname 为 browser.cache.disk.parent_directory ， value 为 /dev/shm/firefox\n\n`browser.cache.disk.parent_directory=/dev/shm/firefox`\n\n2.chrome\n\nChrome 则更加简单，只需要在启动快捷键里加一个参数就可以了 – -disk-cache-dir=\"/dev/shm/chrome/\" 即可。\n\n`/opt/google/chrome/google-chrome --disk-cache-dir=\"/dev/shm/chrome/\"`\n\n3.home mount on hdd','linux上SSD优化','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(88,1,'2016-12-30 12:44:23','2016-12-30 12:44:23','[TOC]\n### perl实现HttpServer\n#### 目标\n - 请求常用静态资源,正确响应这些文件\n - 解析目录文件,显示文件及目录信息\n - 默认响应index.html\n - 解析.do,响应data目录下的同名json(特殊)\n - 端口、目录可配置\n#### code:\n\n````perl\n#!/usr/bin/env perl\n#tcp_socket_server.pl\n\nuse warnings;\nuse Socket;\nuse Cwd;\nuse URI;\nuse POSIX qw(strftime);\nuse File::Spec;\nuse POSIX \":sys_wait_h\";\nmy $port = 8080;     #port\nmy $root = getcwd;\nmy %request;         #save headers\nmy $mime;\nmy %mime = (\n    \"text\" => \"text/plain\",\n    \"html\" => \"text/html\",\n    \"css\"  => \"text/css\",\n    \"js\"   => \"application/javascript\",\n    \"json\" => \"application/json\"\n);\nmy $quit = 0;\n$SIG{INT} = $SIG{TERM} = sub {\n    $quit++;\n    exit(0);\n};\n\nsub REAPER {\n    while ( ( my $pid = waitpid( -1, WNOHANG ) ) > 0 ) {\n        print \"SIGCHLD pid $pid\\n\";\n    }\n}\n$SIG{CHLD} = \\&REAPER;\n\nsub main {\n    my $argstr = join( \" \", @ARGV );    #server -p8080 -r /home/toor\n    $argstr = \" $argstr \";\n    if ( $argstr =~ /\\s-h\\s/ ) {\n        print \"usage:\\n\";\n        print \"      perl server.pl -p8080 -r /home/toor/webapp\\n\";\n        exit(0);\n    }\n    if ( $argstr =~ /\\s-p\\s*(\\d{2,5})\\s/ ) {\n        $port = $1;\n    }\n    if ( $argstr =~ /\\s-r\\s?(\\S+)\\s/ ) {\n        $root = $1;\n    }\n    socket( server_socket, AF_INET, SOCK_STREAM, getprotobyname(\'tcp\') )\n        or die \"Socket $!\\n\";\n    setsockopt( server_socket, SOL_SOCKET, SO_REUSEADDR, 1 )\n        or die \"Can\'t set SO_REUSADDR: $!\";\n    my $my_addr = sockaddr_in( $port, INADDR_ANY );\n\n    bind( server_socket, $my_addr ) or die \"Bind $!\\n\";\n\n    listen( server_socket, 5 ) || die \"Listen $!\\n\";\n\n    print \"http server start in http://127.0.0.1:/$port\\n\";\n    print \"http server work  in path $root\\n\";\n    while ( !$quit ) {\n        accept( client_socket, server_socket ) || do {\n\n            # try again if accept() returned because a signal was received\n            next if $!{EINTR};\n            die \"accept: $!\";\n        };\n        defined( $pid = fork ) || die \"Fork: $!\\n\";\n        if ( $pid == 0 ) {\n            &accept_request(client_socket);\n            exit(0);\n        }\n        else {\n            close(client_socket);\n        }\n    }\n\n}\n\nsub accept_request {    # handle a request\n                                      # my $socket = shift;\n    &parse_headers(client_socket);    #parse\n    my $uri = $request{\'uri\'};\n    if ( !$uri ) {\n        close(client_socket);\n        return;\n    }\n    $now = strftime( \"%Y-%m-%d %H:%M:%S\", localtime )\n        ;                             #my $now = `date`; # $now =~ s/\\n//;\n    print \"$now $request{\'method\'} $uri\\n\";\n    $uri =~ s/(\\?.*)// if ( $uri =~ /\\?.*/ );\n    if ( $uri =~ /\\w+\\.html$/ ) {\n        $mime = $mime{\'html\'};\n    }\n    elsif ( $uri =~ /\\w+\\.css$/ ) {\n        $mime = $mime{\"css\"};\n    }\n    elsif ( $uri =~ /\\w+\\.js$/ ) {\n        $mime = $mime{\"js\"};\n    }\n    elsif ( $uri =~ /\\w+\\.json$/ ) {\n        $mime = $mime{\"json\"};\n    }\n    elsif ( $uri =~ /\\w+\\.svg$/ ) {\n        $mime = \"image/svg+xml\";\n    }\n    elsif ( $uri =~ /\\w+\\.do$/ ) {\n        $mime = $mime{\"json\"};\n        my $prefix;\n        my $suffix = $uri;\n        my $refer  = $request{\'$Referer\'};\n        if ( $refer && $refer =~ /htmls(\\/.*\\/)\\w+\\.html/ ) {\n            $prefix = \"/data$1\";\n            $suffix =~ s/\\/(\\w+)\\.do/$1.json/;\n            $uri = \"$prefix$suffix\";\n        }\n        else {\n            $suffix =~ s/\\/(\\w[\\w\\d\\.]+)\\.do/$1.json/;\n            $uri = \"/data/$suffix\";\n\n            # resp_error( 500, \"Bad Request\" );\n            # close(client_socket);\n            # exit(1);\n        }\n    }\n    else {\n        $mime = \"text/html\";\n    }\n    my $filename = File::Spec->catfile( $root, $uri );\n    if ( -e -f $filename ) {\n        send_success($filename);\n    }\n    elsif ( -e -d $filename ) {\n        if ( -e -f \"$filename/index.html\" ) {\n            send_success(\"$filename/index.html\");\n        }\n        else {\n            resp_filelist($filename);\n        }\n    }\n    else {\n        resp_error( 404, \"Not Found\" );\n    }\n    close(client_socket);\n}\n\nsub parse_headers {\n\n    # my ($socket) = @_;    #client socket\n    my $content = \"\";\n    while (1) {\n        my $buffer;\n        my $flag = sysread( client_socket, $buffer, 1024 );\n        $content .= $buffer;\n        last if ( $flag < 1024 );\n    }\n    if ( $content =~ m/^(.*)\\s(\\/.*)\\s(HTTP\\/\\d\\.\\d)/ ) {\n        $request{\'method\'}   = $1;\n        $request{\'uri\'}      = URI::Escape::uri_unescape($2);\n        $request{\'protocol\'} = $3;\n    }\n    my @header = split( /\\n/, $content );\n    foreach (@header) {\n        if (/^([^()<>\\@,;:\\\\\"\\/\\[\\]?={} \\t]+):\\s*(.*)/i) {\n            $request{$1} = $2;\n        }\n    }\n}\n\nsub resp_headers {\n    print client_socket \"HTTP/1.0 200 OK\\n\";\n    print client_socket \"Content-Type: $mime;charset: utf-8\\n\";\n    print client_socket \"Date: $now\\n\";\n    print client_socket \"Server: xyserver\\n\";\n    print client_socket \"\\n\";\n}\n\nsub resp_filelist {\n    my ($directory) = shift;\n    opendir( DIR, $directory ) or die \"cannot open $directory:$!\";\n    resp_headers();\n    ( my $shortdir = $directory ) =~ s{$root}{};\n    $shortdir =~ s/\\/\\//\\//g;\n    print client_socket\n        \"<html><head><meta http-equiv=\'Content-Type\' content=\'text/html; charset=utf-8\' /> <title>Index of ./</title></head><body><h1>Directory:$shortdir</h1><table border=\'0\'><tbody>\";\n    print client_socket\n        \"<tr><td><a href=\'../\'>Parent Directory</a></td><td></td><td></td></tr>\";\n    foreach ( sort readdir DIR ) {\n        next if (/^\\./);\n        my @info = stat(\"$directory/$_\");\n        ( my $href = \"$shortdir/$_\" ) =~ s/\\/\\//\\//g;\n        $href = \"$href/\" if ( -d \"$directory/$_\" );\n        my $size = $info[7];\n        my $mtime = strftime( \"%Y-%m-%d %H:%M:%S\", localtime( $info[9] ) );\n        $href =~ s/\\/\\//\\//g;\n        print client_socket\n            \"<tr><td><a href=\'$href\'>$_</a></td><td style=\'text-align:right\'>$size  bytes</td><td> $mtime</td></tr>\";\n    }\n    closedir DIR;\n    print client_socket \"</tbody></table></body></html>\";\n}\n\nsub resp_error {    #status, message\n    my ( $status, $error ) = @_;\n    print client_socket \"HTTP/1.0 $status $error\\n\";\n    print client_socket \"Content-Type: text/html;charset: utf-8\\n\";\n    print client_socket \"Date: $now\\n\";\n    print client_socket \"Server: xyserver\\n\";\n    print client_socket \"\\n\";\n    print client_socket\n        \"<html><head><title>Http Error</title></head><body><h2>Http Error...</h2><p>errror status:$status</p><pre>error message:$error</pre><hr><i><small>Powered by javaway</i></body></html>\";\n}\n\nsub send_success {\n    my $filename = shift;\n    resp_headers();\n    open FILE, \"<$filename\"\n        or die \"cannot open $filename:$!\";\n    foreach (<FILE>) {\n        print client_socket $_;\n    }\n}\n\nmain();\n\n````\n\n#### 问题：\n - 阻塞式socket判断数据读完的问题？\n   临时解决：假定读取的数据长度为1024的概率为0,每次读取1024字节，则读取到数据不为1024时读取完成!\n - 使用perl,fork子进程导致的僵尸进程问题？waitpid判断\n','perl实现HttpServer','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(91,1,'2017-01-14 10:31:29','2017-01-14 10:31:29','### 天清地宁老师解读心经与清静经\n\n\n《太上清静经》与《般若波罗蜜多心经》一样，都属于上乘经典，共性的特点就是直指宇宙本源的规律。大家知道现在处于万事万物的世界，这是站在形而下的层面讨论的，大家可以看到身体、树木花草、日月星辰，各种各样的差异。各种差异的本源在哪里？无论是身体，机械，都是有生灭，生灭由谁主宰？万事万物从哪里来？有网友问了这个问题。“我想问为什么会有男人女人的区别。”小孩子一来到世界，都会有个疑问，妈妈我从哪里来？为什么我是男孩或女孩？男孩与女孩为何会有差别？这几个看似最简单的问题其实也最深奥。现代生物学很发达，但没有解释人从哪里来，生命的本源在哪里？我们现在只了解到各种生物物种的差异源于DNA的不同，不同生物物种的根源从哪里来，涉及进化问题，从生物学到古生物学，再到天体物理学，到天文学，到整个宇宙学，整个西方科学脉络，从形而上到形而下寻找规律。这种答案，在西方科学界还没有最终答案，肉体由各个器官组成，器官又由各个细胞组成，基因的背后是什么？核糖、核苷酸，这又从哪里来？从最原始的元素氮氢氧来。氮氢氧的不同排列组合形成物种的差异。这就要追溯到物理学，而现在物理学和化学、生物学正在融合，但是融合还有一个本质问题没有回答，用最基本元素还无法合成生命。基因克隆还需要从动物身体找细胞来克隆。说明什么？按照西方的科学体系，用最简单元素无法合成一个有思想有情感的动物，人和物理世界还有难以跨越的鸿沟。\n\n \n\n   暂时放下这条线索，放下西方的科学路线，回到传统文化去看。《清静经》直指宇宙生成变化的规律。《心经》也如此，直指宇宙人生本源的智慧。“老君曰：大道无形，生育天地；大道无情，运行日月；大道无名，长养万物。”天地可以站在不同层面来定义，站在地球上，地球之外的宇宙太空是天；以太阳系为地去看，太阳系之外的是天；站在银河系，银河系之外是天。中国的文化是高度抽象的，同一概念可在不同层面去演绎。但无论哪个层次的演绎，都涉及到一个问题——天地从哪里来？谁生育了天地？《清静经》里讲“大道无形，生育天地”，天地是有形的，从无形来。无形是什么？这就涉及到道家说的——无极；在佛家语言里，无极就是“空”。“空”和“有”的关系就是形而上和形而下的关系。无极、太极、五行之间的关系，我之前在书院已经讲过，五行、八卦都是能量场的概念，还没有涉及到有形。五行是宇宙生命的五种状态，是用能的概念演绎的，五行揭示了无形的能量状态转化为有形的物，这种演化就很有意思了。比如说，天上有五大行星（金星、木星、水星、火星、土星），地上也有各种物体，石头对应的是金，水对应的就是水，火就是火。五种东西的源头是什么？源头是气，太极之阴阳二气。土和金没有本质差异，土继续硬化就变石头，就是金，石头一风化就有成土了。金生水，水可以说是金的儿子，金的能量往中心聚敛，聚敛到极点就柔了，成水，物极必反。水至柔至刚，古语说“滴水穿石”，水最柔，反而把最硬的石头滴穿了，柔到极点又至刚了。大家看看八卦里的坎卦，外阴内阳，内敛而不外泄。“上善若水，水善利万物而不争”把天的德性给大家演绎了。天生万物，地养万物，天是生的功能，地养，生了万物却不与万物争，生的能量从哪里来？从坎里面的一点真阳来，这点真阳是生养万物的源头，平时涵盖在阴里面。从地面的五行讲到人体五脏的五行——肝心脾肺肾。刚才讲的水里面那点真阳，对应的是肾的元阳之气。生命的驱动力就靠这点元阳，中医里叫元精。元精，是指一种能量状态，整个身体的发育都是这个元精的衍生物，长成整个身体，驱动其发育成熟；等到男女成熟后，元精还负有生殖功能，繁衍后代，子女是元精的衍生物。在有人之前，天地从哪里来？我以前在讲解《天堂游记》这本经书时，已经讲解了这个问题，大家有兴趣可以在网站找找我以前讲课的内容来看。\n\n \n\n道家里面讲，道怎样生养万物，无极如何演变成太极再到五行，能量状态从无形的五行再到有形的五行，形而上到形而下转换，有无的转换，其实讲得很清楚了，但是现代科学还没有达到这个层面。《太上清静经》讲，天地都是由道生出来。“大道无情，运行日月”，早上日升起来，晚上月升起来，轮流值班，是谁在推动日月？谁在让他们值班？站在现代科学角度看，日月是没有情感的。但这只是假设而已，如果人跑到日月看呢？现在我们已经有登月飞船，上去后也是用肉眼看到的世界，那么肉眼看不到的世界呢？大道无情，日月背后是什么东西在运转？“大道无名，长养万物。吾不知其名，强名曰道”，有了天地，有了日月，自然生出万物。那么万物是谁在养？我叫不出名字，姑且称为道，这一段是讲形而上的概念。形而上为体，形而下为用。一个功能，要是不发挥出来，人是无法捉摸的。例如电能，要是没有开发出来大家就感觉不到，但通过电灯、电脑、电视等这些电能的具体应用的器物，我们就知道电能的存在，通过机械的驱动使用出来才知道。我们看不见电能，不代表它不存在，用出来了大家就明白了。这个比方大致能让大家了解道的体和用是相互关联的。形而上为之道，形而下为之器。器，就是有形有质的东西。男人女人不一样，是肉眼看到的差异，其实都是人。人从哪里来？是阴阳二气的交合，相互作用而来。\n\n \n\n“夫道者，有清有浊，有动有静”，清者上浮，重者下沉。人生出来是道作用的结果，而这种结果有两种表现形式，就是清和浊，动和静，清浊是相对的，动静也是相对的，于是就形成了男女的相对差异。在婴儿时，男婴和女婴，基本是很像的，向前追，在胚胎开始的阶段，几乎没有差别，胚胎慢慢成长，长出了男女生殖器官的不同。长出器之前已经有气存在。胚胎没有形成前是什么？现代科学讲是男女受精卵形成，形成前是什么？站在有形有质的层面，精子卵子都储存在男人女人体内，这是站在器的层面去观察。站在无形的层面看，就是两团气，男人凝聚了更多阳气，男人好动，动的能量谁提供？阴精。女人好静，浓缩更多的是下沉过程的气。男人女人的差异是暂时的，局部的，本源是连续变化的。在男女的相互关系中，各自从对方身上获得了平衡。男人好动，比较理性；女人好静，相对感性一些，两者的角色不能相互取代。比如，一个在外面打拼、表面刚强的男人回到家里，如果此时妻子用细心温柔照顾，这样一种温馨话语，有这种阴柔能量，可以让这个男人恢复精神。男人在外面发泄完的阳气需要阴气去平衡，妻子的温柔言语，充满关爱的行为，让他疲惫的心一下子缓解过来，迅速获得平衡。我们只看到这个妻子很体贴，很舒服，让丈夫感到很温馨，这是肉眼看的见的，说不出是什么原因来。但若跳出器的世界，站在气态身、光态身的角度看，男女其实是阴阳二气相互交融的结果。“天清地浊，天动地静；男清女浊，男动女静”将道的作用形式和结果表现非常提纲挈领地列出来。更本质的一句话“降本流末，而生万物”，因为有了男女，就有了后代，有了一个家，“道生一，一生二，二生三，三生万物”。以家庭为基础的各种人和事，形成了社会、国家。如果男女的阴阳二气属于割裂状态，不融合，这个家就支离破碎，万物就生养不出来，或者生出来后很易被毁害。降本流末，把末看清楚，明白其源头在哪里，自然看万事万物的规律也就清楚了。\n\n \n\n“清者浊之源，动者静之基”这句话如何理解？在山清水秀的地方，在大山里小溪的源头是从石头缝出来的，石头能生水，石头能聚敛水气，刚流出来的时候是清的，后来随着水流汇聚越来越多，从山上往下流，经过泥巴、落叶就参杂了浊的东西。这个比方是从看得见的层面理解“清者浊之源”。若从人体去看，我们有形的肉体属于浊，是看得见的。浊的源头在哪？中医讲是精气神。道家讲，精从气来，气从神来，神生气，气生精，精又涵盖气，气又涵盖精，精气神其实是一体三面，同一事物的不同表象。我们说话做事想问题，很多时候是在调用神光。当我们很投入听一门课，一边听一边思考，碰到有很多问题不容易理解，把过去很多问题翻出来，经过老师的讲解有点豁然开朗，听完后比较累。劳累是因为你的气减少，耗损一部分能量，而豁然开朗是虽然耗损一部分能力，但接通了神这种更高的能量。这其实就是一放一收，一阴一阳。可见，我们学习的过程是神在用，也包含了气和精这两个层面，也即固态身和气态身的动都源于光态身的动。跑步时运动的更多是有形的身体，固态身和气态身在耗损，但跑完步之后的累跟思考完后的累是两种不同层次的累。这就是劳力者和劳心者的差异。农民干完活，吃饭睡觉就可以恢复；但科研工作者、经理老总，研究复杂问题的那种累，不是吃饭睡觉就能迅速恢复的。所以说，神（光态身）的能量级更高，补充神的能量要比补充气态身、固态身的能量更难。如果接受到高能量的神的信息，例如把《道德经》的智慧消化掉，把很多死结打开，就有豁然开朗的感觉，就像吃了一个大补丸，这种补来自于神补。补了神，人生会快乐很多，抑郁和烦恼得到开解，这样肉体身心，无论气态身和固态身的状态都可以提到更高层次。这就是为何我们要读经书，不仅是精神和心灵的健康，也是关乎身体健康的。我在以前的课讲身心关系时已经详细讲过。\n\n \n\n再回到讲什么是“清者浊之源，动者静之基”？精气神三者，神属于清，精属于浊。神里面再分清浊。我们动了帮助他人的念头属于清，贪色贪钱的念头属于浊。在面相心相群，有些朋友要求看相，我们可以通过神的层面来分析，然后再看他脸上肌肉五官搭配，它们都是神的信息的衍生物，这些信息的不同排列组合就形成不同的脸型特点。心地善良、光明磊落之人，眼神清澈、专注、淡定；而痴迷贪色贪利者，则目光暗淡、呆滞，往里面陷。因此，从眼神、面相的差异我们可以看出心神的清浊之分。“清者浊之源”，一个正大光明身心清静的人，看私心杂念的人可以看得很清楚，就像天真单纯的小孩子说话很真很直接，经常说出大人难以为对的话，“那个叔叔阿姨很凶”，大人不自觉很尴尬，“那个人的脸怎么阴？是不是有什么东西不得光？”童言无忌。纯净的心就如镜子，可以照出千般污浊之相，看得一清二楚，看到浊之源。人越长大，越累，越违背自己生命本来面目，不像小孩快乐，源于我们远离了清而变得污浊不堪。我常在面相群讲谁贪色，心理有很多心结，更多从眼神中解码出来的，理论依据是《清静经》所讲的“清者浊之源，动者静之基”。动，运动，与静相对。现在我们静静坐在房间里听课，可以感觉到我们的地好像是静的，但其实它正以每秒几百米的速度在自转，身体也在动，我们感到的静是相对的。再如平时一入静就感到思绪万千，肢体定了，但是大脑杂念纷飞。这些念头平时被我们的理智掩盖住了，念头动的速度更快。入静时一个一个杂念接着飞，原来都被掩盖在吃饭睡觉里，并非不存在，而是以高速度隐藏了。等到连杂念都非常少，进入到似有似无、空的状态，得了气感，感觉像蚂蚁在爬，再往深一点，身体若有若无，似乎与天地之气融在一起。也就如《金刚经》所讲的“无我相，无人相，无众生相，无寿者相”“一切有为法，如梦幻泡影，如露亦如电，应作如是观”，这两句话是需要我们在禅定的状态去体会的，体会生命的本源，体会动与静的差异与交融。进入到这种状态才知道何为“清者浊之源，动者静之基”。否则，若只停留在哲学概念层面来讨论，是体会不了《金刚经》、《清静经》这种智慧的。我们在入静的不同阶段，就能逐步从形而下有形有质的固态身进入到有形无质或有质无形的气态身，进而到无形无质的的光态身，甚至直达本源的道体。这四个层次的演变恰是佛家讲的色、受、想、行、识，大家可以打开《心经》，首先讲“观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。舍利子，色不异空，空不异色；色即是空，空即是色，受想行识，亦复如是”。色、受、想、行、识这五种状态也就是生命的五种不同状态，源头在哪？就是空。\n\n \n\n“色不异空，空不异色”，我们这个有形的器世界其实是空的运动表现形式，身体是道体的能量存在状态。人的身体又有三种状态中的固态身，肌肉器官神经系统，这些都是“色”。色不异空，这些器其实是空本源能量的源生物。空不异色，即空作为一种抽象存在是在“色”，在器世界得到的具体表象。“色”不是理解为男女之色的色，包括了有形有质的器世界。“色即是空，空即是色”，色是空这种能量的具体衍生物，终归要回归到空的状态。肉体死了之后，会变成枯骨，还原成分子原子，再分解便成了空；空又生出有，精子卵子到受精卵再生人。这个过程其实是能量演变从有形到无形，再从无形到有形转换的过程，就如太极阴阳鱼，你中有我，我中有你。再去看“受想行识”，“受”是感受，感知系统所发出来的信息。我们举个例子，我若用手指挠一下你的皮肤，你感到痒，首先是你的触觉，依赖于皮肤。若没有色这个层面，没有有形的固态身，就没有痒的感觉，但仅有固态身行不行？不行。还需要心念去分辨，这种感觉叫痒，那种感觉叫疼，这个过程是你的皮肤传感神经系统，把别人挠你的能量经过神经系统到大脑，再靠心念分别出来，分辨这种感觉叫痒。这个过程就是“受”，涵盖了“色”，以色为基础，但跟色又不一样。有痒这种感觉，其实是我先动了念头要挠你，想跟你开玩笑，这是我心念发出的一个信号，而你则通过皮肤接触再到大脑神经分析出我这个心念是什么意义，这个过程是在瞬间完成的。若我们修行到较高境界，对方只要动一个念头，我们就能感受到。会心一笑，心有灵犀一点通其实就是这个作用，这些能量的接通已经超越了肉体、知觉的障碍。心念动的能量本身是“空’能量的运用，与固态身的运用是不一样的。“清者浊之源，动者静之基”，念头动的速度比身体的速度快。现在我们的身体表面是安静的，但五脏六腑的运行是一直在动的，当入静感受到有气，呼吸似乎不存在，念头似有似无的时候，就知道肉体是念头连续变化形成的一个感受。我曾经讲过一个案例，在心理学实验，把一个死刑犯的眼睛蒙上，在他的手轻轻划一刀，然后打开水龙头模仿血流往下滴的声音，告诉他“我们刚才在你动脉割了一刀，现在血正在一滴一滴地流”，两个小时后，他就真的死了。在这个过程中，通过触觉“受”，接受的信号是划了一刀，实际没有割到大动脉，但他心里在暗示自己在滴血，通过水龙头的水滴传到大脑形成一种幻觉，就变成真的，心念不断告诉自己，生命在走向死亡。整个过程只有心念在动，这样的心理暗示，涉及到“想”“行”，“行”是宇宙、身体运行的一种本能，这种快速运动很难被我们感知到。现在我们表面安静，身体的还在按一定程序在运动，这个就是“行”，其功能也是源于“空”，或者道家所讲的“道”。空，不是什么都没有，而是涵盖了整个宇宙的万物不同的运动变化。刚才中医群一网友说，“要生存，就会有想法，既然有想法，那又怎么做到清心呢？四大皆空的人也会有想法？”，这是对“空”误解，空不是说什么都没有，佛家讲“真空生万有”。若了解物理学的知识就知道，微观粒子怎么冒出来的？分子里面有原子，有核，还有中子，再微观到夸克层面的各种子，佛家讲这些都是从都是“空”冒出来，不是讲啥都没有。\n\n因此，也可以说“受即是空，空即是受”。触觉的过程也是空的一种作用形式，想和行也是。只是这种行运动的速度太快了，以至于我们意识不到，我们现在感受不到五脏六腑的气血如何运动，但入静的话能感觉到。静到若有若无的时候(告诉大家我的一个经历)，只要动一个念头，发出去之后可以百发百中的。有一次早晨入静到一定时间，我想看看几点了，我刚冒出一个念头6点55分，马上看表，果然是6点55分，这就是直觉，非常准确。长期修定入静到了比较高的层次就有这种本能。佛家讲“定中生慧”，就是在入定、静的时候不断逼近动，看清动的真相，当念头都不生起时，就无限接近空。空能生出万有，在空的状态发出的念头能量是很强的，很准确，相当于激光，它能使不同光子向同一方向形成高速运动，运行的速度和能量都很高。我们入静入定的过程，就是形成高能量的光的过程，但是这种光可以比一般激光更快，传播的速度更高。当修定到了直觉功能很强时，即使相隔几千公里，都可以相互感应彼此的想法。比如说有哪位朋友跟我的气场比较步调一致，我想告诉他在将来某个时间告诉他一件事，结果他就不知不觉地在那个时间点主动跟我联系。最近我也跟一个网友体验过这种步调一致，彼此的心念接通了。我们没有通过手机电话，但为何能够双方彼此接通？接通是由于内心相对处于静的高度敏感的状态，心灵就有所感应，有所感有所应，也是空的一种作用形式。所以，想即是空，空即是想；行即是空，空即是行；行不异空，空不异行。这个过程就是生命感应的过程。“人能长清静，天地悉皆归”，如果我们能长期处于入静，就能感到天地跟自己身体都是一团东西，一体的，这团东西，姑且叫道、空。关于“定”和“静”，我在上周讲《灵宝定观经》时讲过。\n\n \n\n空能生万有，比如刚才说念头一动，对方有了感应，就行动同步了。心念的动是想、识。身体本能的无意识就是行。刚才死刑犯的例子，就是由“想”深入到“形”，不断暗示就成真了，影响到有形的躯体。所以我们长成不同模样，是心念不断强化的结果，念头的本源是识。控制一个人长成什么样子，比如出生就少了胳膊，长兔唇，佛家讲源于“识”。现代生物学讲是基因导致身体的缺损，但生物学没有解释为什么他的基因就突变了，别人的基因是正常的？科学将这叫概率。那为何这一概率偏偏发生在你身上呢？发生在你身上就是百分之百，现代科学解释不了，它对生命的认识停留在肤浅的有形有质的层面，没法看到无形的信息能量跟有形的器是如何转换的。为什么说佛学道学是大智慧？因为它们揭示了现代科学还未探析到的生命本源的内容。接触佛学，就知道三世因果是站在识的层面考虑问题的。识涉及到生命源程序和密码的问题，属于宇宙生命更深层次的概念。大家接触过电脑就知道，word程序背后都是基于windows平台，而windows本身是操作程序，基于源代码，储存在注册表，最后是0101这种基本的二进制代码，也即太极阴阳。正常运行的一台电脑，信息是正确的，若受病毒感染，文档打不开，windows平台出了问题，DOS系统可能管用，若DOS也不管用了，那就要更改源代码，需要重装了。重装都不管用的话，这病毒就太厉害了，阴阳颠倒了，整个源程序都要换掉了。病毒入侵的不同程度影响电脑不同程度的障碍。\n\n \n\n有些人外表看起来很健康，但心里藏着很多见不得阳光的垃圾，形成阴性性格，长期作用于肉体，使得肉体出现这样那样的特征，在声音、面相、言行中表现出来。因此，通过面相可以知道你的心理，从意识心理再到无意识心理，从这一生的信息追溯到前一生的信息，这是一层层往下剥的过程，也即《心经》所讲的色受想行识这些不同层面。为什么高层次的看相能够看到一个人与生带来的信息？中医讲气质之性，深层就是过去那么多代形成的生命信息。佛家讲，这叫“阿赖耶识”，是根本识，不随生死而消失。这也是现代科学所讲的，信息和能量不可分，是没有生灭的，物质有生灭，信息能量只会在不同的储存形式中转变。身为男人，带着更多阳的信息，但阳中有阴，阴中有阳；女人表面是阴，里面是阳，容易在心里面波动。女人表面安静，但内心很多情感在波动。所以，女子修行最大的难处是情意缠绵。男性修行最大的关口是色，男属阳，Yu望老在外面动。女子是静中带动，心里面情丝缠绕，那种幻想、情感的期待动得很快。修行中斩断情丝靠什么？靠定力和慧力。读了《清静经》、《心经》会豁然开朗，女性就不会那么缠绵，男性会把燥火化掉，恢复到澄明状态，不容易受燥火牵制。所以“清者浊之源，动者静之基。人能常清静，天地悉皆归”。回到天地生成的源头，这样生命体验，难道不就是天地万物与你为一吗？孟子讲，“吾善养吾浩然之气……则塞于天地之间”，生命的体验要由静到定，由浅层的定再到深层次的定。“色不异空，空不异色。受想行识，亦复如是”，把生命不同层次及其联系讲清楚，语言非常精炼，需要我们在入静中一层层地逐步体验。《清静经》和《心经》二者是相互融合的，佛家的语言表达出来就是《心经》，用道家的语言表达出来就是《清静经》。这两部经是给上等根器的高智慧人去读的，中下等一点根器的可能读不懂。有些同学问我老师这部经怎么解？我说你要读懂这部经需要的知识面太广了，而且不仅是懂，还要实实在在地践行，站桩打坐，不到一定程度根本无法体会到色受想行识的变化，更不能体会到什么是“清者浊之源，动者静之基”，也就是流行语说的一点feel都没有。你自己一团云雾，搞不懂经里说什么，又不去践行，怎么能解呢？若真正亲修实证会发现，这些经书的确字字珠玑，直指生命本源的规律。\n\n \n\n“夫人神好清而心扰之，人心好静而Yu牵之”，这句话揭示了烦恼众生为何还流浪生死，做不到怡然自在，主宰不了自己的命运，就是因为我们的神由清变浊了，心由静变得躁动不安，变得昏沉污浊了，心便躁动了，从而生出了色受想行识，也就停留于最表层的器世界打转了。我经常跟大家开玩笑，你就是在肉团打转了，彻头彻尾的饮食男女，少了一顿或者少点男女之事就躁动不安，对生命的理解和体验的层次是很低很低的，像动物一样被无明的本能驱动，但这种本能并非源头能量，只是能量的具体表象，而这种表象是一种不是原本的、正道的，而是歪道。有正就有邪，有光明就有黑暗，正与邪，光明与黑暗，佛与众生，仙人与凡夫都是一体两面，都是空、道的不同存在形式。所以说，神仙本是凡人做，只怕凡人心不坚。我们能否突破凡人的燥火，跨越本能驱动，在于能否凭着你对生命智慧的追求，用慧力斩断情丝，控制好被燥火约束的冲动，把冲动转为参悟生命本源的能量。这就需要我们在修行中一层一层去探索。佛家讲修行先从修普提心、慈悲心开始。饮食男女的的本能首先是吃喝，若“闻其声，不能吃其肉”，当你想吃肉时，听到动物的声音，能想到它们都是活灵活现的生命，不能因为我暂时想吃，把它给宰割了，这样一种仁慈之心本身是对生理Yu望的约束和反思。我以前讲过人为何应该吃素不吃肉。因为我们都是吃五谷的俗人，五谷杂粮就是大自然配给六道中人道的食物，谷物跟人的信息能量是匹配的，吃肉多了，生命能量就降级了。吃肉多的人容易躁动不安，容易被Yu望牵着走，好争好斗，XingYu过分膨胀，为什么？动物的理性比较低，受较低级的能量信息操纵，为什么人能管住动物，而动物管不了人？其实就是不同生命级别的区别。吃肉多了容易变成动物一样血腥残暴，缺乏理性。大家不要简单从形而下的营养层面去看，天地有更高能量更高的营养，为何我们要吸收比人类还更低级的能量？植物吸收天地能量的机制其实是很奥妙的，把大自然中的阳光雨露转化为能量。修佛修道修得比较好的人吃的东西越来越少，从吃素开始慢慢减少食量，难道他们不饿吗？是因为身心清静了，身体的正气与天地正气交换渠道打通了，把一般吃肉的俗人不能吸收的能量都吸收进去了，整个身心与宇宙能量的交换系统与贪吃荤腥的人不一样。人家为什么对食Yu越来越淡薄？吃素的人，内心清静的人，头脑会越来越清晰敏捷，吃肉多的人大脑容易昏沉，躁火多。这些也是大家在修佛修道时必须要搞清楚，要去问自己，这一生到底是要将生命往更高层次推进，还是往低层次、动物层次走？这个就是个人选择了，我们若缺乏智慧就看不到宇宙中不同生命层次的规律，也不明白它们之间的转换，只能受本能驱使了。人来到这个世界，其实已经带有杂质，佛家讲的六道里面有天道、阿修罗道、人道、畜牲道、饿鬼道、地狱道，不同层次的道反映不同的生命能量级别，天道比阿修罗道高，阿修罗道又比人道高。但高与低是相对的，只是能量信息的作用不一样，越高你的自控能力就越高，自由度越高；越低，自控能力就越差，到了地狱自己就没有自主权了。姑且不讲我们肉眼看不见的几道，大家对比一下人道和畜牲道，一只鸡、一只狗活动范围很有限，但比蚂蚁的活动范围要稍宽一点，就反映了鸡狗比蚂蚁的能量级和自由度要高。人比鸡狗活动范围要更大，自由度更高。假定做了一头猪或一只鸡，出生的一刹那决定了其自由度。公鸡姑且还能报晓打鸣，母鸡能下蛋；而猪生来只会吃，啥事不做，只能被人吃了，人给了它吃的，最后它被人吃了，也是一种因果，民间这些说法反映很多规律。猪光接纳人的食物而不贡献，啥都不贡献只能把自己一身肉贡献出来被人吃了。当然，我的意思不是叫大家要去吃猪肉，这不最近就出来猪流感了吗？举这个例子是为了让大家从人和动物能量的差异，参悟一些东西。再看人间，有些人特别贪色，晚上没事干就去酒吧或一些SeQing场所娱乐，因为他的生活很空虚无聊，上网就看美女看SeQing片，他的生命系统是非常狭窄的，主宰不了自己的命运。而有家庭责任感有事业心的人，晚上会陪陪家人，跟配偶交流，跟孩子们讨论时事政治，他的心灵世界要比那些一到晚上就纵情声色的人宽广。又如科学家和修行的人，跟我们一般俗人不一样，晚上有空继续研究课题，或者读道经佛经，了解茫茫宇宙的变化规律。科学家与修行人的生活在普通人看来是比较单调枯燥的，但心灵是非常丰富的。大家刚开始看经书，有太多专业术语想不通，但经过老师一讲解或许就通了，很有兴趣去了解心理学、天文学、生物学。这一系列学问，其实在其他经书里也是有所涵盖的。道家讲，上知天文，下知地理，中通人事，天文地理人事都是道的衍生物，光天文就你研究的了，那么多的星座它们跟人五脏六腑的对应关系是什么，这里面太多学问太有意思了。下了班之后，研究这些学问会很快乐，因为精神世界打开了，自由度比满脑子淫Yu的人要宽。问问自己这一生往哪里走？修道修佛的人真的是傻瓜？还是会享受生命、体验生命更高层次的人？大家把“色不异空，空不异色，受想行识，亦复如是”这些话参悟一下，马上会豁然开朗。俗人和有志向探索生命大智慧的人有何差别？一个是自控力差，一个是自控力高；一个是被约束在有限的世界里，一个可以体验更广博的世界。\n\n \n\n“常能遣其Yu而心自静，澄其心而神自清。自然六Yu不生，三毒消灭”，这里六Yu也就是《心经》所讲的眼耳鼻舌身意，都是由感觉器官和意念生发出来的Yu望，把我们的本心真心扰乱了。眼睛贪色，喜欢看花花世界，耳朵喜欢听靡靡之音，但生命本源的色彩，我们看不到，所以我们得不到清静。《清静经》就告诉我们如何回归本源，看清生命真正的色彩，聆听宇宙真实的声音。这个过程怎么修？“常能遣其Yu而心自静，澄其心而神自清。”《清静经》里的神与心是不同层次的，神比心的层次要高，心的层次再降级就变情，情往下就变Yu，再往下就是气态身和固态身。人的肉体是Yu望产生出来的，但又夹杂三身，光态身又夹杂神和心。例如，一个人在专心思考时，认真做论文肯定不会情思缠绵，专心致志时，整个理性思维的活动范围比情Yu层面要宽大。情里又分真情和矫情，专门诱惑别人动淫Yu之心的人，不断抛媚眼逗人笑就是矫情，诱惑女子的男人那些挑逗的语言也是矫情，是虚假的。为何叫矫情？这些话不真实，跟内心最深处的信息不匹配。热恋中的男人想跟女人发生性关系，然后说一大堆漂亮的话做承诺；女子明知道受骗，但还是爱听。爱听就是贪恋，其源头是情丝，产生的源头是明辨是非的理性之心降级了，理性告诉你他的话里有水分，不是真情是矫情，但你还相信，是情丝把理性给屏蔽了，情迷心窍，结果是“伤心总是难免的，你又何必一往情深”。你的心本来可以不受伤，但自己犯贱，追求虚幻的东西，这首歌以及其他情歌里面深层的道理还是值得我们咀嚼的，这是情歌的另外一面，所以说事物都有两面性。但痴男怨女一听，还是陷进去了，没有通过歌词来反省。我自己其实不喜好流行歌，但街边小巷时不时飘来一句，歌词就告诉你为何伤心，但唱歌者还是越唱越痛苦，但是越痛苦还得越唱。今天我们先讲到这里。','天清地宁老师解读心经与清静经','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(92,1,'2017-02-14 09:29:52','2017-02-14 09:29:52','[TOC]\n\n## Gecko寻找插件\n\n>firefox基于Gecko内核 , Gecko 可以在多个地方和使用多种命令寻找插件。下面这个section， How Gecko Finds Plug-ins，描述了这种规则，同时接下来这个section，Checking Plug-ins by MIME Type，描述了您如何使用JavaScript定位您的插件以及如何建立某种被注册为某一类型的MIME。\n\n## Gecko如何寻找插件\n\n当一个基于Gecko的浏览器启动时，它通过检查如下的目录去寻找插件：\n\n### Windows\n1.	 由MOZ_PLUGIN_PATH环境变量指出的目录。\n2.	%APPDATA%\\Mozilla\\plugins， 其中%APPDATA%为每一个用户的 Application Data（应用数据）的目录。\n3.	Application directory\\plugins， 其中 Application directory 是每个应用的安装目录。\n4.	[Plug-ins within toolkit bundles](https://developer.mozilla.org/en/Shipping_a_plugin_as_a_Toolkit_bundle).\n5.	Profile directory\\plugins，其中 Profile directory是一个用户profile目录。\n6.	由 HKEY_CURRENT_USER\\Software\\MozillaPlugins\\*\\Path 记录的值指出的目录，其中*可以被任何名称取代。\n7.	由 HKEY_LOCAL_MACHINE\\Software\\MozillaPlugins\\*\\Path 记录的值指出的目录，其中*可以被任何名称取代。\n\n### MacOSX\n1.	Application directory/plugins, 其中 Application directory 是应用的安装目录。\n2.	/Library/Internet Plug-Ins.\n3.	/Library/Internet Plug-Ins.\n4.	/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources.\n5.	[Plug-ins within toolkit bundles](https://developer.mozilla.org/en/Shipping_a_plugin_as_a_Toolkit_bundle).\n6.	Profile directory/plugins, 其中 Profile directory 是用户profile目录。\n\n### Linux\n1.	由 MOZ_PLUGIN_PATH 指出的环境变量。\n2.	~/.mozilla/plugins.\n3.	Application directory/plugins，其中  Application directory 是应用的安装目录。\n4.	/usr/lib/mozilla/plugins (在64位系统中，是 /usr/lib64/mozilla/plugins).\n5.	[Plug-ins within toolkit bundles](https://developer.mozilla.org/en/Shipping_a_plugin_as_a_Toolkit_bundle).\n6.	Profile directory/plugins，其中 Profile directory 是一个用户profile目录。\n\n对应的环境按照对应的目录去从前到后查找插件\n\n参考连接\n[http://askubuntu.com/questions/383960/](http://askubuntu.com/questions/383960/where-is-firefoxs-plugins-directory \"Title\") \n[Firefox developer documentation](https://developer.mozilla.org/zh-CN/Add-ons/Plugins/Plugin_API_Reference/Plug-in_Basics#How_Gecko_Finds_Plug-ins \"Title\") ','linux下firefox安装支持flash','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(93,1,'2017-02-18 13:00:44','2017-02-18 13:00:44','### linux启动错误:lldpad: config file failed to load\n[TOC]\n1. 查看lldpad信息:man lldpad(不存在时创建该文件)\n	/conf --->定位OPTIONS\n		   lldpad has the following command line options:\n\n		   -h     show usage information\n\n		   -f filename\n				  use  the specified file as the configuration file instead of the\n				  default file:  /var/lib/lldpad/lldpad.conf  lldpad  expects  the\n				  directory of the configuration file to exist, but if the config‐\n				  uration file does not exist, then a default  configuration  file\n				  will  be  created.  lldpad creates and maintains the contents of\n				  the configuration file.  Configuration should  be  performed  by\n				  using lldptool or dcbtool.\n			...\n2. 使用locate lldpad|grep conf不存在该文件\n3. 输入lldpad产生lldpad.conf,\n4. find /var/log -type f -exec rm -v {}\\;  //delete log info\n5. find /var/log -type f|xargs grep failed 然仍然不能去除该错误.\n	/var/log/messages:Feb 19 09:13:28 door2 lldpad: config file failed to load,\n6. google --lldpad: config file failed to load\n	help me in [https://github.com/openSUSE/lldpad/blob/master/config.c](https://github.com/openSUSE/lldpad/blob/master/config.c)\ncode:\n```c\n/*\n * init_cfg - initialze the global lldpad_cfg via config_init\n *\n * Returns true (1) for succes and false (0) for failed\n *\n * check to see if lldpad_cfs is already initailzied\n */\n	int init_cfg(void)\n	{\n			const char *p;\n			int err = 1;\n\n			config_init(&lldpad_cfg);\n\n			if (check_cfg_file()) {\n				err = 0;\n				LLDPAD_INFO(\"%s: failed to create config file\\n\", __func__);\n			} else if (!config_read_file(&lldpad_cfg, cfg_file_name)) {\n				err = 0;\n				LLDPAD_INFO(\"%s: config file failed to load\\n\", __func__);\n			} else if (config_lookup_string(&lldpad_cfg, \"version\", &p)) {\n				LLDPAD_INFO(\"%s: config file version incorrect \", __func__);\n				LLDPAD_INFO(\"rebuild file with correct version.\\n\");\n				destroy_cfg();\n				remove(cfg_file_name);\n				if (check_cfg_file() ||\n					!config_read_file(&lldpad_cfg, cfg_file_name))\n					err = 0;\n			}\n			return err;\n	}\n```\n7. ll /var/lib/lldpad/lldpad.conf \n	-rw-------. 1 root root 587 11月 19 00:23 /var/lib/lldpad/lldpad.conf\n	\n8. chmod 644 lldpad.conf\n\n\n','linux启动错误:lldpad: config file failed to load','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(100,1,'2017-05-12 00:03:21','2017-05-12 00:03:21','[TOC]\n\n# 个人信息\n\n - xuxihai/男/1992\n - 本科/山西大学/计算机科学与技术\n - 工作年限：2年\n - 技术博客：http://www.xuxihai.top\n - Github：http://github.com/x373241884y\n - 期望职位：前端开发工程师，Node.js开发工程师，Python开发工程师，全栈工程师．．．\n - 期望薪资：税前月薪13k~16k\n - 现居地址：北京\n - 期望城市：北京/杭州/深圳\n\n---\n\n# 联系方式\n\n- 手机：18234116049 (住地信号差，异常请使用邮件)\n- Email：x373241884y@gmail.com\n- QQ：373241884\n\n---\n\n# 培训经历\n### 青岛Qst培训\n　培训内容：javaEE, Spring,Struts2,Hibernate框架\n\n---\n\n# 工作经历\n\n## 北京科蓝软件系统股份有限公司\n\n前端工程师（2015年7月 ~ 2017年9月）\n\n  1、重庆力帆车贷系统\n  \n  - S:　该系统是一个信用贷车系统，方便用户在线贷车．前端团队的我和同团队一位前辈WBR加上同公司后端团队一同完成，使用公司的类Angularjs框架\n  - T:　WBR支持一周，WBR负责框架的搭建工作，及预料到的棘手问题或组件的处理．我负责教会后台开发人员快速使用该框架前端如何编写业务逻辑代码\n    及开发过程遇到的困难解决、维护该框架下的组件bug、后续需要的组件引入或实现．\n  - A:　１．处理相关后台人台在使用前端框架过程中遇到的问题；２．使用２个单页加上angularjs路由机制实现系统的多角色下权限控制；３．使用正则表达式解决\n    金额格式化组件在中文输入法下仍可以输入非数字字符bug；４．扩展日期组件不能根据后端数据动态显示某一日期的情况；５．变更分页控件的样式风格；６．引入\n    可搜索的下拉框组件；等等其他工作内容\n  - R:  直到去支持同公司其他其他项目，相关组件都运行良好．同时也学到了许多东西．\n  \n\n  2、公司研发的银行柜面系统\n  \n  - S: 原系统基于Java编写C/S结构应用，需求是改造成B/S结构，然后嵌入开源浏览器，系统的使用者是银行柜员，分两个子系统，重要需求是需要让柜员尽\n    量可以全键盘操作，使用公司的类Angularjs框架\n  - T: 我所属部门团队10多号人加上几位新人及项目经理完成这一改造，初期我负责全键盘操作的实现，实施过程中负责系统的技术问题解决、相关组件\n    的开发和性能优化、部分业务逻辑代码的移植\n  - A: １．使用事件冒泡＋angularjs的事件广播机制＋$q实现系统的全键盘操作;２．优化团队他人编写的菜单组件；３．实现可编辑的下拉框，同时带按键控制下拉菜单弹出的；\n    ４．实现日期格式化组件；５．实现支持快捷键的搜索组件；６．优化系统的标签式导航组件；７．系统角色权限控制；等等其他\n  - R: 系统已经稳定运行，几个月后离开，后续团队维护人员并无大bug告知．这是一个令人难忘的项目．该项目让我收货许多．\n\n\n  3、民泰银行手机银行和直销银行移动app\n  \n  - S: 手机银行和直销银行移动端混合开发App，使用公司的混合开发框架(类Ionic)\n  - T: 搭建开发环境，编写HTML页面，编写业务逻辑代码，与后台人员调试某些接口，与原生调试某些插件，整合某些组件\n  - A: 搭建开发环境，根据设计稿编写HTML页面，编写业务逻辑代码，与后台人员调试某些接口，与原生调试某些插件，整合加载更多、短信验证码倒计时组件．\n  - R: 几个月的努力，系统已经稳定上线．组件运行良好．\n \n \n 4、百信银行企业网银\n\n  - S: 负责前后端分离应用下的前端视图层的环境搭建，开发，\n  - T: 搭建开发环境，组装UI提供的部分HTML页面成一个web应用，编写业务逻辑代码，编写关键性交易，系统的组件添加和维护，登录和登录后首页的切图，页面数据交互逻辑，动画效果，浏览器密码控件，U盾控件的接入。\n  - A: 搭建开发环境，组装应用，编写逻辑代码，组件bug修复，页面切图，动画效果几番变更。\n  - R: 近三个月的努力，系统即将封版．即将上线．\n\n# 个人作品\n\n### 个人网站 \n - 使用Nde.js(Express+mysql+Ejs(前台)+Angularjs(后管))开发\n - 浏览效果:http://www.xuxihai.top　[前台预览](http://115.28.81.19) [后台预览](http://115.28.81.19/admin/index.html)   (管理员：admin/admin2017)\n - 代码地址:http://github.com/x373241884y/xxhblog\n\n### HttpServer(http简单实现)\n -  功能：响应html,js,css,json等静态文件资源和列出文件夹下的文件列表,不包含Http缓存,gzip等高级功能\n -  相关技术:Http协议，socket编程，perl使用fork子进程，java 使用多线程，nodejs使用核心net模块\n -  代码地址:http://github.com/x373241884y/HttpServer\n\n### 爬虫工具\n - 功能：模拟用户登录网站，获取某一接口数据，使用该列表数据生成xlsx信息，发送到指定邮箱\n - 相关技术:nodejs,熟悉使用nodejs相关模块:commander.js,moment,request,request-promise,mocha,excel.js\n - 代码地址:https://github.com/x373241884y/csiivpmouth\n\n\n# 个人技能\n以下均为我熟练使用的技能\n\n- 前端基础：HTML/HTML5/CSS/CSS3/Javascript/ES5/部分ES6\n- Web开发：NodeJs/Java\n- Web框架：SSH(java)/Express(node.js)\n- 前端框架：Bootstrap/AngularJS\n- 前端脚手架：Grunt/Gulp\n- 数据库相关：MySQL\n- 版本管理：Svn/Git\n- 系统相关：２年Linux下开发经验,熟悉Linux常用命令\n\n# 其他经历\n - 写过爬虫(nodejs)\n - 写过命令行脚本(perl,nodejs)\n - 写过Atom插件\n - 自建翻墙SS服务器\n - Linux下搭建过svn服务器，熟悉apache/nginx\n\n---\n\n# 个人评价\n\n优点：出现问题自己解决，代码追求性能，追求简短精练。\n缺点：过于自我，不善于总结，学的东西太杂而不精。\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n','个人简历','NULL','draft','open','open','','','NULL','NULL','2017-09-17 09:00:20','2017-09-17 09:00:20','NULL',0,'',0,'page','',0),(95,1,'2017-02-21 03:29:41','2017-02-21 03:29:41','#### git推送已存在的库\n1 . \n> …or create a new repository on the command line\n\n```\necho \"# expressORM\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:x373241884y/expressORM.git\ngit push -u origin master\n```\n2 . \n\n> …or push an existing repository from the command line\n\n```\ngit remote add origin git@github.com:x373241884y/expressORM.git\ngit push -u origin master\n```\n3 . \n	>…or import code from another repository\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.','git推送已存在的库','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(97,1,'2017-03-29 23:22:13','2017-03-29 23:22:13','[TOC]\n### 获取当前js执行的脚本节点\n#### 方法一\n\n> 原理:js加载会阻止后面的dom渲染，所以执行到某个script,后面的script和dom都还不存在\n 但是如果有async脚本就不行了(This won\'t work for async scripts);\n \n```js\n  	var scripts1 = document.getElementsByTagName(\"script\"),\n  		selfScript1 = scripts1[scripts1.length-1];\n```\n[stackoverflow](http://stackoverflow.com/questions/2954790/javascript-get-the-current-executing-script-node) stackoverflow.\n\ndemo1\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>测试获取当前js执行的脚本节点</title>\n</head>\n<body>\n<script type=\"text/javascript\">\n	window.attr1 = \'val1\';\n	window.attr2 = \'val2\';\n	window.attr3 = \'val3\';\n	var scripts1 = document.getElementsByTagName(\"script\"),\n		selfScript1 = scripts1[scripts1.length-1];\n	console.log(selfScript1);\n</script>\n<script type=\"text/javascript\">\n	window.attr2 = \'val112\';\n	var scripts2 = document.getElementsByTagName(\"script\"),\n		selfScript2 = scripts2[scripts2.length-1];\n	console.log(selfScript2);\n</script>\n</body>\n</html>\n```\n\n#### 方法二\n\n> 原理:html5的一个(https://developer.mozilla.org/zh-CN/docs/Web/API/Document/currentScript)新特性,不是所有的浏览器支持,\n可以使用一个[polyfill](https://github.com/JamesMGreene/document.currentScript) polyfill. 实现基本使用方法一来做的\n\n```js\n    document.currentScript\n```\ndemo2\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>document.currentScript获取当前js执行的脚本节点</title>\n</head>\n<body>\n<script type=\"text/javascript\">\n	window.attr1 = \'val1\';\n	window.attr2 = \'val2\';\n	window.attr3 = \'val3\';\n	console.log(document.currentScript);\n</script>\n<script type=\"text/javascript\">\n	window.attr2 = \'val112\';\n	console.log(document.currentScript);\n</script>\n</body>\n</html>\n```\n#### 方法三\n> 原理:使用id,绝对定位，都懂的..\n\ndemo3\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>绝对定位-获取当前js执行的脚本节点</title>\n</head>\n<body>\n<script type=\"text/javascript\" id=\"test1\">\n	window.attr1 = \'val1\';\n	window.attr2 = \'val2\';\n	window.attr3 = \'val3\';\n	var script1 = document.getElementById(\'test1\');\n	console.log(script1);\n</script>\n<script type=\"text/javascript\" id=\"test2\">\n	var script2 = document.getElementById(\'test2\');\n	console.log(script2);\n</script>\n</body>\n</html>\n```','获取当前js执行的脚本节点','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',2),(98,1,'2017-04-06 09:23:51','2017-04-06 09:23:51','In your local clone of your forked repository, you can add the original GitHub repository as a \"remote\". (\"Remotes\" are like nicknames for the URLs of repositories - origin is one, for example.) Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version. In terms of commands that might look like:\n```sh\n# Add the remote, call it \"upstream\":\n\ngit remote add upstream https://github.com/whoever/whatever.git\n\n# Fetch all the branches of that remote into remote-tracking branches,\n# such as upstream/master:\n\ngit fetch upstream\n\n# Make sure that you\'re on your master branch:\n\ngit checkout master\n\n# Rewrite your master branch so that any commits of yours that\n# aren\'t already in upstream/master are replayed on top of that\n# other branch:\n\ngit rebase upstream/master\n```\nIf you don\'t want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with git merge upstream/master. However, for making further pull requests that are as clean as possible, it\'s probably better to rebase.\n\nIf you\'ve rebased your branch onto upstream/master you may need to force the push in order to push it to your own forked repository on GitHub. You\'d do that with:\n\n```sh\ngit push -f origin master\n```\nYou only need to use the -f the first time after you\'ve rebased.\n\n- [stackoverflow](http://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository)\n- [github](https://help.github.com/articles/syncing-a-fork/)','git更新fork过来的repo','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',0),(101,1,'2017-05-20 07:22:17','2017-05-20 07:22:17','[TOC]\n\n## js编码:\n\n  1.	使用虚拟dom操作,合并样式相关操作,减少浏览器repaint/reflow\n  2.	减少dom的查找,$(\".abc.ff\"),缓存dom,记得清理，缓存溢出\n  3.	对于频繁的对象属性查找，特别是原型链很长时,采用函数顶部变量声明，减少属		性查找的时间,同时可以减少压缩后的大小，这是采用一点空间换取时间的策略\n  4.	使用jquery选择器查找dom时，使用优先级从高到低策略写出性能更好的表达式，selector越精确,尽量减少查找时间,防止不必要的性能损耗\n  5.	不要过于频繁的绑定事件，尽量使用事件委托机制(原理是事件冒泡)\n  6.	 延迟加载，代理缓存,减少不必要的请求\n  7.	循环dom列表时，存储长度，减少查询长度的次数\n\n## css编码:\n\n  1.	使用外联样式，复用样式规则，不使用@import导入的形式\n  2.	编写css样式时，去除无用的样式，样式规则尽量采用从优先级从高到低，selector越精确,减少规则渲染时间。\n  3.	对于小图标，尽量使用字体文件，或减少图片文件，使用一张图片文件，使用background-position和background-sige偏移去显示某一个小图标\n\n## http协议方面:\n\n  1.	合并脚本文件，合并css文件，减少请求次数\n  2.	使用浏览器缓存策略,策略依赖于http相应头. \n    -  客户端缓存:expires,cache-control:控制浏览器缓存文件过期时间，不再发送请求，过期废弃，重新发送请求\n    - 服务端缓存:Last-Modified/If-Modified-Since,ETag/If-None-Match,服务器端记录并响应文件上次变更时间或变更计算出来的hash(etag)，客户端以后每次请求都带上该信息放入头部，让服务器作为对比依据,如果未发生变化，相应304状态码，相应不含有响应体，直接使用上一次的响应体，如发生变化,重新记录并响应文件上次变更时间或变更计算出来的hash(etag)\n    - 调试技巧:chrome硬性重载，实是抛弃上次的响应头，带上了请求头:Cache-Control:no-cache(http 1.1),Pragma:no-cache (http1.0)\n  3.	开启gzip压缩,减少传输数据的大小,需要选择合适的压缩比，过渡压缩会使得浏览器的解压缩时间过长.\n  4.	增多域名提高并发,突破单个域名并发数量的限制\n  5.	减少cookie的大小,不过于使用cookie\n\n## 其他:\n\n  1.	去除注释，压缩js,压缩css,减少传输文件大小\n  2.	脚本放在body底部，防止脚本下载传输时页面无法渲染而出现的白屏等待，样式放在顶部head，防止页面出现后无样式时页面混乱到正常的闪烁\n  3.	使用cdn加速策略,减少自身网站带宽压力\n  4.	图片过多时使用js预载入\n  5.	服务器域名解析DNS设置合理','web性能优化个人总结(待更新)','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'post','',2),(102,1,'2017-05-21 05:31:59','2017-05-21 05:31:59','- 无善无恶心之体，有善有恶意之动．知善知恶是良知，为善去恶是格物．\n- 你未看此花时，此花与汝心同归于寂；你来看此花时，则此花颜色一时明白起来．\n- 心能转境，则同如来;心随境转，苦不堪言;境随心转，就得自在。\n- 最困难的时候是提升自己心灵最好的时候，要善于抓住这个机会，利用这个困难来磨炼自己的意志．\n- 吾心安处，即是天下．\n- 闭心自慎，终不失过兮。秉德无私，参天地兮。——战国·屈原《橘颂》\n- 不求此生长欢乐，惟愿此心长清静．','拾人牙慧','NULL','publish','open','open','','','NULL','NULL','2017-06-13 22:46:10','2017-06-13 14:46:10','NULL',0,'',0,'page','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (1,1,0),(17,1,0),(19,1,0),(29,1,0),(21,2,0),(21,3,0),(23,4,0),(25,5,0),(25,6,0),(27,7,0),(31,1,0),(33,1,0),(35,1,0),(37,1,0),(39,8,0),(39,9,0),(39,6,0),(39,10,0),(41,11,0),(41,12,0),(41,8,0),(43,8,0),(43,13,0),(43,14,0),(85,15,0),(85,16,0),(86,5,0),(87,18,0),(88,19,0),(89,6,0),(89,17,0),(90,20,0),(91,20,0),(92,5,0),(92,17,0),(93,5,0),(95,5,0),(96,13,0),(97,3,0),(98,21,0),(101,3,0),(101,24,0),(101,26,0),(101,25,0),(101,27,0),(97,26,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,7),(2,2,'category','Hybrid',8,1),(3,3,'category','',0,1),(4,4,'category','centos',0,1),(5,5,'category','',0,1),(6,6,'category','',0,2),(7,7,'category','',0,1),(8,8,'category','',0,3),(9,9,'category','',0,1),(10,10,'category','数据库',0,1),(11,11,'category','',0,1),(12,12,'category','',0,1),(13,13,'category','',0,1),(14,14,'category','',0,1),(15,15,'category','nginx',0,0),(16,16,'post_tag','nginx',0,0),(17,17,'post_tag','linux',0,0),(18,21,'category','angular',3,0),(19,22,'category','Perl',0,0),(20,23,'category','文章收藏',0,0),(21,24,'category','git',0,0),(22,25,'post_tag','git',0,0),(23,26,'category','拾人牙慧',0,0),(24,27,'category','Http',0,0),(25,28,'post_tag','Http协议',0,0),(26,29,'post_tag','web前端',0,0),(27,30,'post_tag','性能优化',0,0),(28,31,'post_tag','git常用命令',0,0);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=MyISAM AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'未分类','uncategorized',0),(2,'Hybrid','hybrid',0),(22,'Perl','perl',0),(3,'js','js',0),(4,'centos','centos',0),(21,'Angular','angular',0),(5,'linux','linux',0),(6,'mysql','mysql',0),(7,'ubuntu man','ubuntuman',0),(8,'java','java',0),(9,'hibernate','hibernate',0),(10,'数据库','数据库',0),(11,'struts2','struts2',0),(12,'interceptor','interceptor',0),(13,'filter','filter',0),(14,'web.xml','web-xml',0),(15,'nginx','nginx',0),(16,'nginx','nginx',0),(17,'linux','linux',0),(18,'jjjj','jjjj',0),(19,'fgfffff','fgfffff',0),(20,'fgfffff2','fgfffff2',0),(23,'文章收藏','文章收藏',0),(24,'git','git',0),(25,'git','git',0),(27,'Http','http',0),(28,'Http协议','http',0),(29,'web前端','web前端',0),(30,'性能优化','性能优化',0),(31,'git常用命令','git常用命令',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=MyISAM AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','x373241884y'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'show_admin_bar_front','true'),(10,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(11,1,'wp_user_level','10'),(12,1,'dismissed_wp_pointers','aioseop_menu_220,aioseop_welcome_220'),(13,1,'show_welcome_panel','1'),(14,1,'session_tokens','a:1:{s:64:\"771b904053d788d823e78fce70afc320e52157218ba200adfda34647505b9f32\";a:4:{s:10:\"expiration\";i:1477214699;s:2:\"ip\";s:14:\"223.95.136.147\";s:2:\"ua\";s:105:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\";s:5:\"login\";i:1477041899;}}'),(15,1,'wp_dashboard_quick_press_last_post_id','3'),(16,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(17,1,'metaboxhidden_nav-menus','a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}'),(18,1,'closedpostboxes_dashboard','a:0:{}'),(19,1,'metaboxhidden_dashboard','a:0:{}'),(20,1,'wp_user-settings','mfold=o&editor=html'),(21,1,'wp_user-settings-time','1476856470'),(22,1,'aioseop_seen_about_page','2.3.10.2');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(255) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'x373241884y','a5c057127068892affd5e8b8dac47734','x373241884y','x373241884y@gmail.com','','2016-10-15 15:38:49','',0,'x373241884y'),(2,'admin','21232f297a57a5a743894a0e4a801fc3','admin-nicename','admin@qq.com','www.admin.com','2016-12-04 03:46:45','14808412054149ebefp3hxfjd7kmx',0,'admin-ds');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-07-28  7:27:18
